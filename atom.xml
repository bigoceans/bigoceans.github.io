<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BIGOcean&#39;BLOG</title>
  
  <subtitle>让生活更精彩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-23T08:22:40.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BIGOcean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>model</title>
    <link href="http://yoursite.com/2020/03/23/model/"/>
    <id>http://yoursite.com/2020/03/23/model/</id>
    <published>2020-03-23T04:02:16.352Z</published>
    <updated>2020-03-23T08:22:40.524Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;更多精彩文章请关注公众号『大海的BLOG』&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;更多精彩文章请关注公众号『大海的BLOG』&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PICNIC-V.2.0.0_一款给天空加滤镜的APP</title>
    <link href="http://yoursite.com/2020/03/23/2.PICNIC-V.2.0.0_%E4%B8%80%E6%AC%BE%E7%BB%99%E5%A4%A9%E7%A9%BA%E5%8A%A0%E6%BB%A4%E9%95%9C%E7%9A%84APP/"/>
    <id>http://yoursite.com/2020/03/23/2.PICNIC-V.2.0.0_%E4%B8%80%E6%AC%BE%E7%BB%99%E5%A4%A9%E7%A9%BA%E5%8A%A0%E6%BB%A4%E9%95%9C%E7%9A%84APP/</id>
    <published>2020-03-23T04:02:16.000Z</published>
    <updated>2020-03-23T04:10:23.784Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我是一个不拍照片的直男，但当我第一次透过picnic看我头顶的天空时，我就决定把它留在我的手机里！（大概也有近两年时间了）</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><blockquote><h2 id="由于该博客最近搭建，所以只好将我其他平台的作品搬运过来，一些图片上有版权水印也请见谅哈"><a href="#由于该博客最近搭建，所以只好将我其他平台的作品搬运过来，一些图片上有版权水印也请见谅哈" class="headerlink" title="由于该博客最近搭建，所以只好将我其他平台的作品搬运过来，一些图片上有版权水印也请见谅哈"></a>由于该博客最近搭建，所以只好将我其他平台的作品搬运过来，一些图片上有版权水印也请见谅哈</h2></blockquote><h3 id="软件介绍："><a href="#软件介绍：" class="headerlink" title="软件介绍："></a><strong>软件介绍：</strong></h3><p><strong>PICNIC：是一款给天空加上各色滤镜的APP</strong><br><strong>优点：给天空加绝美的滤镜！无广告！打开即用！</strong><br><strong>版本号：v.2.0.0</strong><br><strong>测试机版本号：安卓8.0</strong><br><strong>效果：（不会拍照，这是随手一拍。。。不过按我技术随手和正经拍都一个样）</strong></p><p><img src="https://attach.52pojie.cn/forum/202003/01/233623t428df0qyb82dw22.png" alt="效果图1"></p><p><img src="https://attach.52pojie.cn/forum/202003/01/233626d74fqwcvnpiffonw.png" alt="效果图2"></p><p><strong><center>（左1为原图，另外三个仅仅做测试，不代表picnic的天空滤镜数量）</center>&gt;</strong></p><p><strong>软件运行图：</strong><br><strong>无广告加载界面，直接进入主界面。</strong><br><strong>无复杂功能碍眼，设置、相册、拍照已足矣。</strong></p><p><img src="https://attach.52pojie.cn/forum/202003/01/233628vix4vo8v2dioxdny.png" alt="效果图3"></p><p><strong>主功能很简单（效果真的很好！）就不一一介绍了，一键傻瓜式操作就能拍的漂漂亮亮的天空！</strong><br><strong>下面进入设置界面！</strong><br><strong>我们可以选择是否保留软件的水印、静音拍照、保留位置、取消软件消息通知（但我从来没印象收到过picnic的软件通知。。）</strong></p><p><img src="https://attach.52pojie.cn/forum/202003/01/233630v0pxlcx6cwcvmimx.png" alt="效果图4"></p><p><strong>总之，我是极力推这样的良心软件！</strong></p><p><strong>觉得有意思的朋友快快下载吧~</strong></p><p><strong>下载链接：</strong><br><strong>蓝奏云：</strong><a href="https://www.lanzous.com/i9txiih" target="_blank" rel="noopener">https://www.lanzous.com/i9txiih</a></p><p><strong>百毒云：</strong><br><strong>链接：</strong> <a href="https://pan.baidu.com/s/1u9saCy-0xq1Vv6xUAQMTTA" target="_blank" rel="noopener">https://pan.baidu.com/s/1u9saCy-0xq1Vv6xUAQMTTA</a> <strong>提取码：<code>kgly</code></strong><br><strong>蓝奏云二维码下载：</strong></p><p><img src="https://attach.52pojie.cn/forum/202003/01/233621x6jpr216i6mnpi0j.png" alt="二维码下载"></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      一款能给天空加滤镜的APP
    
    </summary>
    
    
      <category term="安卓" scheme="http://yoursite.com/categories/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>重装系统&amp;激活系统</title>
    <link href="http://yoursite.com/2020/03/21/1.%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F&amp;%E6%BF%80%E6%B4%BB%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2020/03/21/1.%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F&amp;%E6%BF%80%E6%B4%BB%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-03-21T08:50:49.000Z</published>
    <updated>2020-03-23T04:09:18.343Z</updated>
    
    <content type="html"><![CDATA[<p>对于刚刚DIY好一台电脑或者对于目前所用windows系统版本不太满意的人来说，下载一个官方、纯净的系统镜像是至关重要的！下面就来看看如何实现这些操作吧。（所有操作均以Win10为例）</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h3 id="首先说说为什么官方的系统受人推崇吧"><a href="#首先说说为什么官方的系统受人推崇吧" class="headerlink" title="首先说说为什么官方的系统受人推崇吧:"></a>首先说说为什么官方的系统受人推崇吧:</h3><p><strong>首先说说第三方系统镜像：</strong></p><blockquote><p>第一：由第三方人员在官方的系统的基础上修改而得，由于其中集成了大量工具和软件，较为简单易用，所以流传广泛。但是这<strong>并不能</strong>排除其中包含木马和病毒的可能。最重要的就是其中集成的软件九成都是流氓软件，例如臭名昭著的2345、各种页游等等等(得罪不起不一一点名)。为什么要把这些流氓软件集成到第三方系统去呢？当然是牟利哈，百度一下<strong>2345装机联盟</strong>即可知晓。</p><p>第二：在第三方系统制作人员打包封装系统的时候会把一些驱动或者激活信息封装进去，要知道驱动是和硬件相关联的，每个人的硬件不可能一模一样，即便是“万能驱动”在使用第三方系统的时候也免不了会有因<strong>驱动不匹配或激活信息故障导致蓝屏甚至装机失败。</strong></p></blockquote><p><strong>再来说说官方的系统镜像</strong></p><blockquote><p><strong>完全没毛病！</strong>各种更新版本和系统类别全部由用户自己选择，系统不会有任何第三方流氓软件。</p></blockquote><h3 id="那么该如何获取官方系统镜像呢？"><a href="#那么该如何获取官方系统镜像呢？" class="headerlink" title="那么该如何获取官方系统镜像呢？"></a>那么该如何获取官方系统镜像呢？</h3><p><strong>毫无疑问，微软官方下载就是渠道之一</strong></p><blockquote><p><a href="https://www.microsoft.com/zh-cn/software-download/" target="_blank" rel="noopener">微软官方下载</a></p><p>在微软官方下载会使用MeidaCreationTool下载工具（类似于N卡的GeForceExperience）可以本机升级系统，下载iso镜像到本地、或者下载iso镜像并写入U盘，缺点就是下载速度慢。</p></blockquote><p><strong>还有个下载官方系统的好去处</strong></p><blockquote><p><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN,我告诉你</a></p><p>MSDN,我告诉你：全部采用ed2k开头的链接进行下载，包含SHA1校验信息。而且ed2k下载链接可以使用迅雷、百度网盘等工具进行下载，如果条件允许，下载速度较官方的MCT下载工具相比有显著提升。另外和微软官网的相比，这里的收录相对更全，也更方便查找下载不同的版本。</p><center>冗长的系统选择页面</center>![冗长的系统选择页面](https://i.loli.net/2020/03/21/DCZoOUcTlq6RQBX.gif)</blockquote><p><strong>写给对系统安全格外重视的朋友</strong></p><blockquote><p>你们的担心不无道理，若是连镜像都是残缺或者携带捆绑甚至是病毒，那么装机过程再怎么完美也都是瞎费工夫。所以，大家可以下载一个Hash_MD5的校验工具，将下载的系统镜像拖拽进校验工具的工作窗口对比是否和网站提供的SHA1值一致，不一致则重新下载该镜像。</p><p><a href="https://www.lanzous.com/iahx8gj" target="_blank" rel="noopener">Hash_MD5校验工具</a><strong>密码:</strong><code>ocean</code></p></blockquote><h3 id="下载好系统镜像之后呢？"><a href="#下载好系统镜像之后呢？" class="headerlink" title="下载好系统镜像之后呢？"></a>下载好系统镜像之后呢？</h3><p><strong>需要一个做好”格式化”准备的U盘</strong></p><blockquote><p>你需要准备一个≥16GB的U盘（8GB也可以，但这年头8GB的U盘实属罕见）</p></blockquote><p><strong>下载软碟通</strong></p><blockquote><p><a href="https://www.lanzous.com/iahxp9e" target="_blank" rel="noopener">软碟通单文件免安装版本</a><strong>密码:</strong><code>ocean</code></p></blockquote><p><strong>用下载好的镜像通过软碟通制作一个U盘装机盘</strong></p><blockquote><p>1、右键”以管理员身份运行”软碟通</p><p>2、打开UltraISO的窗口后依次点击左上角的“文件”-“打开”-找到存放镜像文件的目录</p><p>3、选中该目标文件，点击“打开”按钮</p><p>4、插入准备好的U盘</p><p>5、再次回到UltraISO窗口，点击菜单栏中的“启动”选“写入硬盘镜像”</p><p>6、接下来在弹出的窗口直接点击“写入”按钮<strong>(注：将写入方法选择为“USB-HDD+”，如果不是这个模式，可能导致电脑无法通过U盘正常启动。)</strong></p><p>7、静候片刻，软碟通正在将系统的镜像文件数据写入到U盘里</p><p>8、下载<a href="https://www.lanzous.com/iahz5vi" target="_blank" rel="noopener">HWID数字权利激活程序</a><strong>密码:</strong><code>ocean</code>将文件下载到你的U盘里(放在根目录就好，激活系统的时候会比较好找)</p><p>9、做好一切准备后就开始重装系统吧</p></blockquote><h3 id="开始重装系统-以Win10为例"><a href="#开始重装系统-以Win10为例" class="headerlink" title="开始重装系统(以Win10为例)"></a>开始重装系统(以Win10为例)</h3><p><strong>首先你需要知道你的电脑进入”选择启动项选择”页面的快捷键是什么,或者是进入BIOS系统的快捷键是什么</strong></p><blockquote><center>其他品牌也可以试试比较大众的启动项选择快捷键</center>![各品牌台式机主板笔记本启动项](https://i.loli.net/2020/03/21/IU4vSlsDKrhjBzy.png)</blockquote><p><strong>插入U盘，在按下电源键的瞬间请用最快手速狂戳对应电脑/主板的快捷键，比如大众一点的按键<code>F12/Delete</code></strong></p><blockquote><p>按下后请选择你插入的U盘的名字，比如是金士顿的64GBU盘那么它的名字就类似Kingston-flashdisk-64GB</p><p>或者是其他检测不到品牌的U盘，你可以找FlashDisk、储存量等闪存的关键字样</p></blockquote><p><strong>因为我们是直接用软碟通将镜像写入了U盘，所以不同于一些进PE系统装机的教程</strong></p><blockquote><p>不同于PE装机，我们则会直接进入到经典的Windows系统安装界面：</p><p>1、选择语言后点击下一步-选择要安装的系统版本（如果你下载的是整合版、就是多个版本和在一起的镜像，那么就会出现这个页面供你选择），例如win10会有教育版、企业版、专业版三种供你选择，默认选专业版。</p><p>2、安装类型选择”自定义：仅安装Windows(高级)(C)”后自动进入”你想将windows安装在哪里？”页面</p><p>3、选中类型名为”主分区”的驱动器，你可以选择先将其格式化，再点击下一步。也可选中后直接下一步，效果应该是大差不差的</p><p>4、等待系统安装</p><p>5、成功进入系统，开始个性设置。</p></blockquote><h3 id="系统激活-以Win10为例"><a href="#系统激活-以Win10为例" class="headerlink" title="系统激活(以Win10为例)"></a>系统激活(以Win10为例)</h3><p><strong>开心的进入系统并开始进行个性设置时突然发现，这个系统还没有激活，该怎么办？</strong></p><blockquote><p>在此之前，我先介绍一下早在制作好U盘启动盘时让你们下载的<a href="https://www.lanzous.com/iahz5vi" target="_blank" rel="noopener">HWID数字权利激活程序</a><strong>密码:</strong><code>ocean</code>吧</p><p><strong>以前：</strong>在还没有出现数字权利工具的时候，某知名网站（软慧网）上有大神写过一个Windows10专业版数字权利获取方法，即使现在教程用途不太大，不过有兴趣的可以去看一下。传送门：<a href="https://www.ruanhuicn.com/key/" target="_blank" rel="noopener">https://www.ruanhuicn.com/key/</a></p><p><strong>如今：</strong>到后来国外某知名论坛传出win10数字权利工具–HWIDGEN</p><center>win10数字权利工具--HWIDGEN</center>![win10数字权利工具--HWIDGEN](https://i.loli.net/2020/03/21/61ejxSHT9IMGvyF.png)<p>在HWID出现之后，数字权利激活Windows10并不是难事了，只需要进行简单的点击操作就可以得到一个数字权利激活成功的Windows系统。</p><p><strong>科普：</strong>数字权利，是针对Windows10系统而言的一种激活方式。全称“使用数字许可证激活” 使用数字权利激活和普通激活方式有什么区别呢？十分重要的一点就是数字权利激活后支持重装，即在重装系统之后可以自动激活系统，保持正版！当然前提条件就是重装系统的时候需要保持和获取数字权利的系统版本保持一致并且需要确保没有更换硬件！<strong>可以简单的认为数字权利激活是永久激活！</strong>区别于kms激活，数字权利是永久的，无需90天循环和kms服务器，风险系数更小。</p><p><strong>HWID支持的版本：</strong>除Windows10 LTSC 2019 和Windows10 server系列系统外，换句话说：适用于大多数Windows10系统，例如win10家庭版、专业版、ltsb2016等等……</p></blockquote><p><strong>win10数字权利工具–HWIDGEN的使用方法</strong></p><blockquote><blockquote><ul><li><strong>确保电脑能正常联网</strong>，网络正常稳定以确保能够成功连接微软服务器</li><li>尽量<strong>关闭360、电脑管家之类的杀毒软件</strong>，防止软件被吞无法使用</li><li>确保<strong>Windows update服务已开启(这一项无需关心，系统默认都是开启update服务的)未被禁用</strong>，禁用过的请开启后使用。激活成功后可关闭。</li><li>打开软件，在工作模式选择HWID，然后点击开始即可</li><li>只能用于Windows10系统，其他系统无效。</li><li>Windows10 LTSC 2019 和 Server版本可以在工作模式切换KMS38进行激活</li></ul></blockquote></blockquote><p><strong>总结一下使用HWID激活的步骤：</strong>先把HWID从你的U盘里拉倒桌面，然后按照上述方法操作激活，成功后就可以把HWID删掉了。</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      如何重装系统并激活系统
    
    </summary>
    
    
      <category term="微软" scheme="http://yoursite.com/categories/%E5%BE%AE%E8%BD%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言编写贪吃蛇游戏</title>
    <link href="http://yoursite.com/2020/03/21/7.C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2020/03/21/7.C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F/</id>
    <published>2020-03-20T17:38:04.000Z</published>
    <updated>2020-03-23T06:17:18.095Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你问我为什么要用c写贪吃蛇游戏？一切都要从那次作业讲起。。。</strong></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><blockquote><p>大一上半年，C程序设计老师布置了一个程序设计作业，于是诞生了这篇代码。</p></blockquote><h3 id="IDE："><a href="#IDE：" class="headerlink" title="IDE："></a>IDE：</h3><blockquote><p>VisualStudio2017社区版</p></blockquote><h3 id="字符集："><a href="#字符集：" class="headerlink" title="字符集："></a>字符集：</h3><blockquote><p>使用多字节字符集</p></blockquote><h3 id="辅助工具："><a href="#辅助工具：" class="headerlink" title="辅助工具："></a>辅助工具：</h3><blockquote><p>EasyX图形库2018春分版</p></blockquote><h3 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h3><p>   <strong>1、因为当时想得高分就以为搞点花里胡哨的就不错（哈哈最后混了个优，乐死我了），所以我编写了账号注册、登录系统、调用了多媒体接口以登录游戏时播放背景音乐、高分榜系统以及附带的升序降序排行函数：</strong></p><p>​            ①账号注册、登录系统、高分榜系统的数据全部分别保存在默认添加创建的Users.dat,scores.dat里，所以要借鉴的朋友需要手动在IDE里添加这两个文件（对应名称可以自己改，但一定要对应到代码里，否则会fp指针调用文件出错）；</p><p>​          ②关于背景音乐：我添加的背景音乐的资源就不放到帖子上了（名字叫silver city，好听，哈哈哈），所以要借鉴源码的朋友需要自己了解一下“如何添加MP3格式的音乐到代码”的问题，然后对代码第328行进行改写;</p><p>​    <strong>2、操作问题：因为我喜欢玩FPS游戏，所以定义的上下左右是wsad（小写，一定要把输入法切换为小写英文状态，否则蛇死亡），所以不习惯的朋友可以重新定义为键盘方向键（需要了解一下键盘虚拟键值，然后改对应的switch语句，代码量应该还是挺大的）。</strong></p><p>​    <strong>3、EasyX图形库：（这段是复制我设计报告的23333333）在我决定用EasyX库的图形函数来绘制地图之前，对于这个模块的编写有很多问题：譬如单用gotoxy()函数实现绘制地图的话，一片黑白，惨不忍睹；而且也会成几何倍的增加代码量：尤其是for循环语句和printf语句会多不胜数。从而就会导致不仅开发人员降低对于代码的可读性，而且从头至尾的黑白界面无疑会劝退很多玩家，降低可玩性。在我用EasyX来绘制地图后，测试的过程只能用两个字来形容：真香！EasyX的一个moveto()配合一个for循环代替了多不胜数的gotoxy()函数和for循环。这不仅大大缩减了代码量，而且图形编程的优点“多彩化”也得以体现。在调试过程中我对for循环进行了优化：一个进行边界的上下绘制，另一个负责左右的绘制，实现了不仅减少了代码量而且没有破坏不影响可读性的前提。</strong></p><p>​    <strong>4、应程序设计老师要求，基本上能达到每个功能、每个函数甚至每一句都有一条注释。。。（想想都要吐了）</strong></p><hr><p><strong>放代码吧：</strong></p><pre class=" language-c++"><code class="language-c++">#include <stdio.h>                        //C语言标准输入输出头文件#include <graphics.h>                // easyx图形库头文件#include <conio.h>                        //获取数据头文件（getch()和kbhit()）#include <windows.h>                //使用其中的Sleep函数控制循环的时间，system("cls")函数来清屏#include <stdlib.h>                        //调用了srand()随机函数#include <time.h>                        //使用当前时钟做随机种子#include <mmsystem.h>                //多媒体设备接口头文件#pragma comment (lib,"winmm.lib")//首先进行一堆宏定义//定义地图大小#define frame_height 30 #define frame_width 30//定义操作键，小写的wasd控制上左下右#define UP 'w' #define DOWN 's'#define LEFT 'a'#define RIGHT 'd'//控制台的点是单位点，不考虑大小，我们用的easyx绘制像素点为了将单位点在图形界面上放大为一个正方形，系数转换×16可以把一个单位点放大成正方形。16可以是任意数，相应的会放大或缩小所有的像素点。#define SIZE 16#define N 4//声明fp是指针，用来指向FILE类型的对象。FILE *fp;int i, j, k, m, n, s[N];char s1[4], s2[4];//蛇的初始方向char ch = UP;//定义一个全局变量，来判断蛇是否成长，成长则速度加快。grow值也相应增加。int grow = 0;//食物的坐标struct Food {        int x;        int y;}food;//蛇的信息：snake[0]是蛇头，len为蛇的长度，speed蛇的速度struct Snake {        int x[50];        int y[50];        int len;        int speed;}snake;//用于储存用户账号密码typedef struct The_users{        char id[11]; //账号        char pwd[20];//密码}users;users a, b;//新建结构体成员变量,用来登陆与注册//此处声明变量void init_map(void);void update_food(void);void move_snake(void);int is_alive(void);void get_speed(void);void gotoxy(int x, int y);void redraw_map(void);void menu();void registers();void Login();//void Create_File();void score();int compInc(const void *a, const void *b);int compDec(const void *a, const void *b);//主函数位置int main(){        initgraph(640, 480);        //创建绘图窗口，长640.        menu();                                        //调用菜单函数        score();                                //调用得分函数        return 0;}//再次绘制地图（根据宏定义中的宽和高）void redraw_map(void){        for (j = 0; j < frame_width; j++)                        //该for循环用于绘制地图的上下边界，根据width宽来从左往右、先上后下依次绘制。        {                moveto(j*SIZE, 0);                                                //将画笔移动到(j*SIZE,0)的位置开始进行下面的绘图，另外(j*SIZE)是将单位点放大SIZE（16）倍                setfillcolor(BLUE);                                                //定义上边界为蓝色                fillrectangle(j*SIZE, 0, j*SIZE + SIZE, SIZE);        //绘制矩形                moveto(j*SIZE, (frame_height - 1)*SIZE);//再次移动画笔                setfillcolor(BLUE);                                                //定义下边界为蓝色                fillrectangle(j*SIZE, (frame_height - 1)*SIZE, j*SIZE + SIZE, (frame_height - 1)*SIZE + SIZE);//绘制矩形        }        for (i = 1; i < frame_height - 1; i++)//次循环绘制地图左右剩余的28个矩形方块,先左后右，从上至下！        {                moveto(0, i*SIZE);                                //画笔移动到(0,i*SIZE)                setfillcolor(BLUE);                                //定义左边界为蓝色                fillrectangle(0, i*SIZE, 0 + SIZE, i*SIZE + SIZE);                moveto((frame_width - 1)*SIZE, i*SIZE);//再次移动画笔                setfillcolor(BLUE);                                        //定义右边界为蓝色                fillrectangle((frame_width - 1)*SIZE, i*SIZE, (frame_width - 1)*SIZE + SIZE, i*SIZE + SIZE); //绘制矩形        }}//然后初始化地图内容void init_map(void){        //初始化食物        srand((unsigned int)time(NULL));//用srand函数集结合time.h头文件中的time来生成随机数        food.x = rand() % (frame_height - 2) + 1;//在1~（frameheight-2）之间随机生成一个食物的横坐标        food.y = rand() % (frame_width - 2) + 1;//在1~（framewidth -2）之间随机生成一个食物的纵坐标        moveto(food.y*SIZE, food.x*SIZE);                //将画笔移动到该随机坐标        setfillcolor(RED);                                                //定义食物为红色        fillcircle(food.y *SIZE + SIZE / 2, food.x*SIZE + SIZE / 2, SIZE / 2);                //定义食物形状为以(food.y *SIZE + SIZE / 2, food.x*SIZE + SIZE / 2)为圆心，SIZE/2为半径的圆形        //初始化蛇        snake.x[0] = (frame_height) / 2;//初始化蛇头横坐标位置        snake.y[0] = (frame_width) / 2;//初始化蛇头纵坐标位置        moveto(snake.y[0] * SIZE, snake.x[0] * SIZE);//画笔移动到蛇头坐标        setfillcolor(GREEN);                        //定义蛇的初始颜色为绿色        fillcircle(snake.y[0] * SIZE + SIZE / 2, snake.x[0] * SIZE + SIZE / 2, SIZE / 2);//画蛇        snake.len = 3;                                                //初始化蛇的节数为3节        snake.speed = 200;                                        //初始化蛇的速度        for (k = 1; k < snake.len; k++)                //用for循环画出蛇剩余的节数        {                snake.x[k] = snake.x[k - 1] + 1;                snake.y[k] = snake.y[k - 1];                moveto(snake.y[k] * SIZE, snake.x[k] * SIZE);                setfillcolor(GREEN);                fillcircle(snake.y[k] * SIZE + SIZE / 2, snake.x[k] * SIZE + SIZE / 2, SIZE / 2);        }}//生成食物void update_food(){        if (snake.x[0] == food.x&&snake.y[0] == food.y)//首先保证每次随机的食物不能刚好随机到蛇头所在坐标        {                food.x = rand() % (frame_height - 2) + 1;                food.y = rand() % (frame_width - 2) + 1;                for (k = 1; k < snake.len; k++)                {                        if (snake.x[k] == food.x&&snake.y[k] == food.y)//判断蛇头坐标等于随机食物的坐标 即：吃到食物                        {                                food.x = rand() % (frame_height - 2) + 1;//再次随机生成食物                                food.y = rand() % (frame_width - 2) + 1;                        }                }                moveto(food.y*SIZE, food.x*SIZE);//移动画笔到随机食物的坐标                setfillcolor(RED);                                //定义食物颜色为红色                fillcircle(food.y*SIZE + SIZE / 2, food.x*SIZE + SIZE / 2, SIZE / 2);                //定义食物为圆形                snake.len++;                                        //蛇的长度加一                grow = 1;                                                //给全局变量grow赋值1        }}//蛇的移动void move_snake(){        if (_kbhit())//kbhit判断键盘输入的虚拟键值                ch = _getch();//将方向键值表现为对应的方向        if (!grow)//此时grow值若为零则执行if语句，不为零则不执行        {                moveto(snake.y[snake.len - 1] * SIZE, snake.x[snake.len - 1] * SIZE);                setfillcolor(BLACK);                solidrectangle(snake.y[snake.len - 1] * SIZE, snake.x[snake.len - 1] * SIZE, snake.y[snake.len - 1] * SIZE + SIZE, snake.x[snake.len - 1] * SIZE + SIZE);        }        for (k = snake.len - 1; k > 0; k--)        {                snake.x[k] = snake.x[k - 1];                snake.y[k] = snake.y[k - 1];        }        switch (ch)        {        case UP:  snake.x[0]--; break;        case DOWN: snake.x[0]++; break;        case LEFT:  snake.y[0]--; break;        case RIGHT:  snake.y[0]++; break;        default:  break;                                        //其他按键直接导致死亡        }        moveto(snake.y[0] * SIZE, snake.x[0] * SIZE);        setfillcolor(GREEN);        fillcircle(snake.y[0] * SIZE + SIZE / 2, snake.x[0] * SIZE + SIZE / 2, SIZE / 2);        grow = 0;}//判断是否存活int is_alive(void){        if (snake.x[0] == 0 || snake.x[0] == frame_height - 1 || snake.y[0] == frame_width - 1 || snake.y[0] == 0)//判断是否撞墙                return 0;                //死        for (k = 1; k < snake.len; k++)                if (snake.x[k] == snake.x[0] && snake.y[k] == snake.y[0])//判断蛇头是否撞到蛇的身体                        return 0;        //死        return 1;                        //活}//通过节数来提升速度void get_speed(void){        if (snake.len <= 6)                snake.speed = 200;        else if (snake.len <= 10)                snake.speed = 100;        else if (snake.len <= 20)                snake.speed = 50;        else if (snake.len <= 30)                snake.speed = 30;        else snake.speed = 20;}//移动光标void gotoxy(int x, int y){        HANDLE hout;        COORD cor;        hout = GetStdHandle(STD_OUTPUT_HANDLE);        cor.X = y;        cor.Y = x;        SetConsoleCursorPosition(hout, cor);}//进入界面void menu(){        InputBox(s1, 4, "输入数字以选择目的：\n1.开始游戏\n2.高分榜\n3.退出游戏\n游戏说明：wasd控制上左下右(小写)", "疯狂的蛇——海制作", NULL, 0, 0, false);        int x, y[3];        sscanf_s(s1, "%d", &x);//将用户输入转化为数字        if (x == 1)        {                InputBox(s2, 4, "输入数字以选择目的：\n1.注册账号\n2.登陆游戏", "疯狂的蛇——海制作");                sscanf_s(s2, "%d", &x);                if (x == 1) {                        registers();                        Login();                }                else if (x == 2) {                        Login();                }                init_map(); //初始化地图                while (1)                {                        update_food();                        get_speed();                        move_snake();                        redraw_map();                        Sleep(snake.speed);                        if (!(is_alive()))                                break;                }                closegraph();                                                //关闭游戏窗口                printf("哈哈小辣鸡，游戏结束!\n");                printf("你的得分：%d", snake.len - 3);//得分=(蛇死亡前节数len)-(蛇的初始节数3)                _getch();        }        else if (x == 2)        {                closegraph();                                                //关闭游戏窗口                printf("                    排行榜\n");                fopen_s(&fp, "scores.dat", "r");                for (x = 0; x < N - 1; x++) {                        fscanf_s(fp, "%d", &y[x]);                        printf("%d\n", y[x]);                }                fclose(fp);                _getch();        }        else//输入3或其他除了1、2任意键均退出游戏        {                closegraph();        }}//注册系统void registers(){        fopen_s(&fp, "Users.dat", "r");        fscanf_s(fp, "%s%s", b.id, sizeof(b.id), b.pwd, sizeof(b.pwd));        InputBox(a.id, 11, "请输入你的账号：", "疯狂的蛇——海制作");        while (1)        {                if (strcmp(a.id, b.id) != 0)//如果两串字符串不相等                {                        if (!feof(fp))//如果未至文件末尾,它的工作原理是，站在光标所在位置，向后看看还有没有字符。如果有，返回0；如果没有，返回非0。它并不会读取相关信息，只是查看光标后是否还有内容。                        {                                fscanf_s(fp, "%s%s", b.id, sizeof(b.id), b.pwd, sizeof(b.pwd));                        }                        else break;                }                else                {                        outtextxy(220, 200, "此用户名已被注册");                        fclose(fp);                        _getch();                        exit(0);                }        }        fclose(fp);        InputBox(a.pwd, 10, "请输入你的密码：", "疯狂的蛇——海制作");        fopen_s(&fp, "Users.dat", "a");        fprintf_s(fp, "%s %s\n", a.id, a.pwd);        outtextxy(220, 200, "奥利给！恭喜你！账号注册成功！");        fclose(fp);}//登陆账号密码，登录时播放bgm嘿嘿sao起来void Login(){        mciSendString("open SC.mp3 alias BIGOcean", 0, 0, 0);        mciSendString("play BIGOcean repeat", 0, 0, 0);        fopen_s(&fp, "Users.dat", "r");        fscanf_s(fp, "%s%s", b.id, sizeof(b.id), b.pwd, sizeof(b.pwd));        InputBox(a.id, 11, "请输入账号", "疯狂的蛇——海制作");        while (1)        {                if (strcmp(a.id, b.id) == 0) break;//如果找到了这个用户名                else                {                        if (!feof(fp))//如果文件未读完                                fscanf_s(fp, "%s%s", b.id, sizeof(b.id), b.pwd, sizeof(b.pwd));                        else                        {                                outtextxy(220, 200, "此用户名不存在!");                                fclose(fp);                                _getch();                                exit(0);                        }                }        }        InputBox(a.pwd, 20, "请输入密码", "疯狂的蛇——海制作");        if (strcmp(a.pwd, b.pwd) == 0)//如果密码匹配        {                fclose(fp);                outtextxy(250, 200, "登陆成功！奥利给！");                initgraph(640, 480);        }        else        {                outtextxy(220, 200, "STFU!密码不正确");                _getch();                exit(0);        }}//分数系统void score(){        fopen_s(&fp, "scores.dat", "r");        for (n = 0; n < N - 1; n++)        {                fscanf_s(fp, "%d", &m);                s[n] = m;        }        s[N - 1] = snake.len - 3;        qsort(s, N, sizeof(s[0]), compDec);        fclose(fp);        fopen_s(&fp, "scores.dat", "w");        for (n = 0; n < N - 1; n++)        {                fprintf_s(fp, "%d\n", s[n]);        }        fclose(fp);}//分数的排序//升序排序int compInc(const void *a, const void *b){        return *(int *)a - *(int *)b;}//降序排序int compDec(const void *a, const void *b) {        return *(int *)b - *(int *)a;}</code></pre><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      C语言编写贪吃蛇游戏
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>算法分析量--时间复杂度</title>
    <link href="http://yoursite.com/2020/03/21/8.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E9%87%8F-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/03/21/8.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E9%87%8F-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2020-03-20T16:17:01.000Z</published>
    <updated>2020-03-23T06:19:52.305Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><p>文章创造背景：我们知道时间复杂度是学习算法的基石，但还是有很多朋友对这个概念不很理解，那么我们就来聊聊它如何“刻画”出一个算法的运行损耗的时间量。</p><blockquote><h3 id="文章叙述方式："><a href="#文章叙述方式：" class="headerlink" title="文章叙述方式："></a>文章叙述方式：</h3><p>我会用一种对话方式尽可能让对于时间复杂度还不懂的朋友清晰明了的对它建立概念。</p><h3 id="文章对话人物："><a href="#文章对话人物：" class="headerlink" title="文章对话人物："></a>文章对话人物：</h3><p>秦老师、大海同学。</p><h3 id="文章内容分配："><a href="#文章内容分配：" class="headerlink" title="文章内容分配："></a>文章内容分配：</h3><p>我将内容分为三个部分：<br>                                                         一：如何刻画一个算法消耗的时间量？<br>                                                         二：时间复杂度的概念怎么得出来的？<br>                                                         三：如何去计算一个算法的时间复杂度？</p></blockquote><hr><p><strong><center> 一：如何刻画一个算法消耗的时间量？ </center></strong></p><p><img src="https://i.loli.net/2020/03/20/ZjDApaJdohRSW7s.png" alt="对话1"><br><img src="https://i.loli.net/2020/03/21/bL4zArIgvcMV6WE.png" alt="对话2"></p><blockquote><center>为了方便朋友们看清楚，我把截图单独拉出来</center></blockquote><p><img src="https://i.loli.net/2020/03/21/SiL27DqdI8Mlkew.png" alt="插图1"><br><img src="https://i.loli.net/2020/03/21/wFdNMvce9ACgW1m.png" alt="对话3"><br><strong><center> 二：时间复杂度的概念怎么得出来的？ </center></strong><br><img src="https://i.loli.net/2020/03/21/ybt1zsgxEGTVYD5.png" alt="对话4"></p><blockquote><center>为了方便朋友们看清楚，我把截图单独拉出来</center></blockquote><p><img src="https://i.loli.net/2020/03/21/5sMtQi9VerGRU3S.png" alt="插图2"><br><img src="https://i.loli.net/2020/03/21/9T1OpMCjs3SRuVw.png" alt="对话5"><br><strong><center> 三：如何去计算一个算法的时间复杂度？ </center></strong><br><img src="https://i.loli.net/2020/03/21/1V6ZdEpfRncJx8t.png" alt="对话6"><br><img src="https://i.loli.net/2020/03/21/xdCXKkOosrH24b3.png" alt="对话7"></p><blockquote><center>为了方便朋友们看清楚，我把截图单独拉出来</center></blockquote><p><img src="https://i.loli.net/2020/03/21/Tb8zhHRcWgQ5e1n.png" alt="插图3"><br><img src="https://i.loli.net/2020/03/21/64o3aY5zK29OQTd.png" alt="对话8"><br><img src="https://i.loli.net/2020/03/21/vpNVqFJo9Un2DP1.png" alt="对话9"></p><hr><p><strong>至此呢，关于我对时间复杂度理解的文章已暂时完结！<br>感谢秦老师和大海同学助力！</strong></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      算法分析量--时间复杂度
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法类" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E7%B1%BB/"/>
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>多线程如何获取结果</title>
    <link href="http://yoursite.com/2020/03/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C/"/>
    <id>http://yoursite.com/2020/03/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C/</id>
    <published>2020-03-18T12:53:03.000Z</published>
    <updated>2020-03-20T06:43:04.392Z</updated>
    
    <content type="html"><![CDATA[<center>Author：BIGOcean</center><p>多线程如何获取结果？</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h2><p>大家一般都会开启多线程去处理任务，如果需要获取线程处理结果怎么办？</p><p>有人会说『全局变量』，但是又会引出共享全局变量后资源竞争导致数据错误的问题。只能通过添加互斥锁进行解决，互斥锁又不能发挥多线程的优势，很是头大。</p><p>那么该如何解决呢？</p><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h2><p>老哥教我可以自定义一个类解决：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args        self<span class="token punctuation">.</span>result <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>result        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None</code></pre><p><strong>使用方式</strong>：直接创建一个对象 <code>thread</code>，在使用方法 <code>thread.start()</code> 后，再调用 <code>get_result()</code> 方法即可获取。</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Author：BIGOcean&lt;/center&gt;

&lt;p&gt;多线程如何获取结果？&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>复用Django应用，使其可以通过pip安装</title>
    <link href="http://yoursite.com/2020/03/13/%E5%A4%8D%E7%94%A8Django%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BD%BF%E5%85%B6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87pip%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/03/13/%E5%A4%8D%E7%94%A8Django%E5%BA%94%E7%94%A8%EF%BC%8C%E4%BD%BF%E5%85%B6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87pip%E5%AE%89%E8%A3%85/</id>
    <published>2020-03-13T11:53:44.000Z</published>
    <updated>2020-03-19T16:50:55.574Z</updated>
    
    <content type="html"><![CDATA[<center>Author：BIGOcean</center><p>想自己打包一个应用，可以像其他模块一样通过 <code>pip install</code> 安装吗？在 <code>Django</code> 项目中，一个应用如果通过此方式随用随安装是不是很帅气？快来看一下如何操作吧！</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h1 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h1><h2 id="1-1应用规范"><a href="#1-1应用规范" class="headerlink" title="1.1应用规范"></a>1.1应用规范</h2><p>为了方便打包，你的应用应该解耦合，并且所有文件都规范放置。其中需要注意：按照 <code>Django3.0</code> 官方文档描述，每个应用中的模板文件 <code>templates</code> 应与主项目中通用模板文件 <code>templates</code> 分离，最主要目的是为了创建可复用应用。</p><blockquote><p>官方文档原文：Just like the static files, we could have all our templates together, in one big templates directory, and it would work perfectly well. However, templates that belong to a particular application should be placed in that application’s template directory.</p></blockquote><p><strong>保证应用所需文件全部包含在应用目录中</strong>即可开始操作。</p><h2 id="1-2-环境"><a href="#1-2-环境" class="headerlink" title="1.2 环境"></a>1.2 环境</h2><p>安装模块：</p><pre class=" language-shell"><code class="language-shell"> pip install setuptools  pip install wheel</code></pre><h1 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h1><h2 id="2-1-准备文件"><a href="#2-1-准备文件" class="headerlink" title="2.1 准备文件"></a>2.1 准备文件</h2><p>比如我要打包应用 <code>polls</code> ：</p><pre class=" language-shell"><code class="language-shell">polls├── __init__.py├── __pycache__│   ├── __init__.cpython-37.pyc│   ├── admin.cpython-37.pyc│   ├── apps.cpython-37.pyc│   ├── models.cpython-37.pyc│   ├── tests.cpython-37.pyc│   ├── urls.cpython-37.pyc│   ├── views.cpython-37.pyc│   └── views_bak.cpython-37.pyc├── admin.py├── apps.py├── migrations│   ├── 0001_initial.py│   ├── __init__.py│   └── __pycache__│       ├── 0001_initial.cpython-37.pyc│       └── __init__.cpython-37.pyc├── models.py├── static│   └── polls│       ├── images│       │   └── 1574779118421.jpg│       └── style.css├── templates│   └── polls│       ├── details.html│       ├── index.html│       └── results.html├── tests.py├── urls.py├── views.py└── views_bak.py # 视图备份文件</code></pre><h3 id="2-1-1-步骤"><a href="#2-1-1-步骤" class="headerlink" title="2.1.1 步骤"></a>2.1.1 步骤</h3><h4 id="2-1-1-1-创建总目录"><a href="#2-1-1-1-创建总目录" class="headerlink" title="2.1.1.1 创建总目录"></a>2.1.1.1 创建总目录</h4><p>1) 创建总目录，比如创建目录 <code>django-polls</code></p><p>2) 然后将应用 <code>polls</code> 移入上方总目录，此时它的目录结构应该是：</p><pre class=" language-shell"><code class="language-shell">django-polls/polls</code></pre><h4 id="2-1-1-2-创建说明文档"><a href="#2-1-1-2-创建说明文档" class="headerlink" title="2.1.1.2 创建说明文档"></a>2.1.1.2 创建说明文档</h4><p>创建说明文档 <code>django-polls/README.rst</code></p><pre class=" language-txt"><code class="language-txt">=====Polls=====Polls is a Django app to conduct Web-based polls. For each question,visitors can choose between a fixed number of answers.Detailed documentation is in the "docs" directory.Quick start-----------1. Add "polls" to your INSTALLED_APPS setting like this::    INSTALLED_APPS = [        ...        'polls',    ]2. Include the polls URLconf in your project urls.py like this::    path('polls/', include('polls.urls')),3. Run ``python manage.py migrate`` to create the polls models.4. Start the development server and visit http://127.0.0.1:8000/admin/   to create a poll (you'll need the Admin app enabled).5. Visit http://127.0.0.1:8000/polls/ to participate in the poll.</code></pre><h4 id="2-1-1-3-创建授权协议文件"><a href="#2-1-1-3-创建授权协议文件" class="headerlink" title="2.1.1.3 创建授权协议文件"></a>2.1.1.3 创建授权协议文件</h4><p>创建一个 <code>django-polls/LICENSE</code> 文件</p><pre class=" language-txt"><code class="language-txt">Copyright (c) 2018 The Python Packaging AuthorityPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</code></pre><blockquote><p>协议文件自己可以从网上寻找生成方式</p></blockquote><h4 id="2-1-1-4-创建安装文件"><a href="#2-1-1-4-创建安装文件" class="headerlink" title="2.1.1.4 创建安装文件"></a>2.1.1.4 创建安装文件</h4><p>1) 创建文件 <code>django-polls/setup.cfg</code> （此文件为模块的配置信息，比如作者的姓名、联系方式等）</p><pre class=" language-txt"><code class="language-txt">[metadata]name = django-pollsversion = 0.1description = A Django app to conduct Web-based polls.long_description = file: README.rsturl = https://www.pythonnote.cnauthor = Ethan Yanauthor_email = yanyuliang6@163.comlicense = MIT  # Example licenseclassifiers =    Environment :: Web Environment    Framework :: Django    Framework :: Django :: X.Y  # Replace "X.Y" as appropriate    Intended Audience :: Developers    License :: OSI Approved :: BSD License    Operating System :: OS Independent    Programming Language :: Python    Programming Language :: Python :: 3    Programming Language :: Python :: 3 :: Only    Programming Language :: Python :: 3.6    Programming Language :: Python :: 3.7    Programming Language :: Python :: 3.8    Topic :: Internet :: WWW/HTTP    Topic :: Internet :: WWW/HTTP :: Dynamic Content[options]include_package_data = truepackages = find:</code></pre><p>2) 创建文件 <code>django-polls/setup.py</code> （此文件是为了构建和安装应用）</p><pre class=" language-txt"><code class="language-txt">from setuptools import setupsetup()</code></pre><h4 id="2-1-1-5-创建引用文件"><a href="#2-1-1-5-创建引用文件" class="headerlink" title="2.1.1.5 创建引用文件"></a>2.1.1.5 创建引用文件</h4><p>默认包中只包含 <code>Python</code> 模块和包。为了包含额外文件，我们需要创建一个名为 <code>MANIFEST.in</code> 的文件。为了包含模板、<code>README.rst</code> 和我们的 <code>LICENSE</code> 文件，创建文件 <code>django-polls/MANIFEST.in</code> 包含以下内容：</p><pre class=" language-shell"><code class="language-shell">include LICENSEinclude README.rstrecursive-include polls/static *recursive-include polls/templates *recursive-include docs *</code></pre><blockquote><p><code>docs</code> 目录为文档存放目录，可有可无，视情况而定。如果需要引入其他文件，按照格式在上述文件中补充即可。</p></blockquote><p>最终的目录结构如下：</p><pre class=" language-shell"><code class="language-shell">django-polls├── LICENSE├── MANIFEST.in├── README.rst├── doc├── polls├── setup.cfg└── setup.py</code></pre><h2 id="2-2-打包"><a href="#2-2-打包" class="headerlink" title="2.2 打包"></a>2.2 打包</h2><p>接下来快看一下如何打包吧！</p><p>1) 进入总目录 <code>django-polls</code> 中</p><p>2) 执行如下命令：</p><pre class=" language-shell"><code class="language-shell">python setup.py sdist bdist_wheel</code></pre><p>3) 最终的模块在如下位置：</p><pre class=" language-shell"><code class="language-shell">dist├── django-polls-0.1.tar.gz└── django_polls-0.1-py3-none-any.whl</code></pre><p><code>django-polls-0.1.tar.gz</code> 即打包好的应用。</p><h2 id="2-3-安装使用"><a href="#2-3-安装使用" class="headerlink" title="2.3 安装使用"></a>2.3 安装使用</h2><p>在应用包所在目录执行如下命令即可安装：</p><pre class=" language-shell"><code class="language-shell">python -m pip install django-polls-0.1.tar.gz </code></pre><p>安装后如何在 <code>Django</code> 项目中使用呢？</p><p>1) 在 <code>settings</code> 文件中添加如下应用：</p><pre class=" language-shell"><code class="language-shell">INSTALLED_APPS = [        ...        'polls',    ]</code></pre><p>2) 在 <code>urls</code> 文件中添加如下代码：</p><pre class=" language-shell"><code class="language-shell">path('polls/', include('polls.urls')),</code></pre><p>3) 迁移数据库文件，创建 <code>models</code>：</p><pre class=" language-shell"><code class="language-shell">python manage.py migrate</code></pre><p>然后即可使用。如果想要使用我打包好的应用体验一把，可以在微信公众号「全栈技术精选」后台回复关键字「polls应用包」获取模块。</p><h2 id="2-4-卸载"><a href="#2-4-卸载" class="headerlink" title="2.4 卸载"></a>2.4 卸载</h2><p>卸载：</p><pre class=" language-shell"><code class="language-shell">python -m pip uninstall django-polls</code></pre><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Author：BIGOcean&lt;/center&gt;

&lt;p&gt;想自己打包一个应用，可以像其他模块一样通过 &lt;code&gt;pip install&lt;/code&gt; 安装吗？在 &lt;code&gt;Django&lt;/code&gt; 项目中，一个应用如果通过此方式随用随安装是不是很帅气？快来看一下如何操作吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django迁移数据库报错解决</title>
    <link href="http://yoursite.com/2020/03/12/15.Django%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2020/03/12/15.Django%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</id>
    <published>2020-03-12T12:14:29.000Z</published>
    <updated>2020-03-23T08:27:58.920Z</updated>
    
    <content type="html"><![CDATA[<p><code>Django</code> 最新版本创建应用后，迁移数据库报错怎么办？</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p><code>Django3.0.2</code>：</p><pre class=" language-shell"><code class="language-shell">(django_dev) > python -m django --version3.0.2</code></pre><p><code>MySQl8.0.19</code>：</p><pre class=" language-shell"><code class="language-shell">Server version: 8.0.19 MySQL Community Server - GPL</code></pre><p><code>Python3.7.6</code>：</p><pre class=" language-shell"><code class="language-shell">(django_dev) > python --versionPython 3.7.6</code></pre><h2 id="2-报错"><a href="#2-报错" class="headerlink" title="2.报错"></a>2.报错</h2><p>执行命令：</p><pre class=" language-shell"><code class="language-shell">(django_dev) > python manage.py makemigrations polls</code></pre><p>报错信息如下：</p><pre class=" language-shell"><code class="language-shell">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.</code></pre><p>根据提示，是数据库 <code>MySQL</code> 与 <code>Django</code> 版本不匹配，建议我们升级 <code>mysqlclient</code>。</p><p>首先要说明的是，数据库 <code>MySQL</code> 与 <code>Django</code> 都是最新版本，不存在需要升级的问题。那么问题就应该出现在连接数据库的模块  <code>PyMySQL</code> 上了，但它也是安装的最新版：</p><pre class=" language-shell"><code class="language-shell">(django_dev) > pip install --upgrade PyMySQLLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleRequirement already up-to-date: PyMySQL in /Users/ethanyan/pyenv/django_dev/lib/python3.7/site-packages (0.9.3)</code></pre><blockquote><p>根据提示，该模块并无任何更新可用。</p></blockquote><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h2><p>既然外部组件并无问题，接下来核查代码层面。可以根据报错提示，进入底层代码逐个文件查找原因，最终定位到如下文件：</p><pre class=" language-shell"><code class="language-shell">django_dev/lib/python3.7/site-packages/django/db/backends/mysql/base.py</code></pre><blockquote><p><code>django_dev</code> 为项目的虚拟环境。</p></blockquote><p>此文件从第 35 行开始，有如下代码在作怪：</p><pre class=" language-shell"><code class="language-shell">version = Database.version_infoif version < (1, 3, 13):    raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)</code></pre><p>原来是底层有版本校验！查看其他文件，发现此校验并无关联内容，即可以注释掉，我们进行尝试：</p><pre class=" language-shell"><code class="language-shell"># version = Database.version_info# if version < (1, 3, 13):#     raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)</code></pre><p>然后再次执行命令：</p><pre class=" language-shell"><code class="language-shell">(django_dev) > python manage.py makemigrations pollsMigrations for 'polls':  polls/migrations/0001_initial.py    - Create model Question    - Create model Choice</code></pre><p>执行成功。</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      Django迁移数据库报错解决
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>python的这些小知识你注意到了吗？</title>
    <link href="http://yoursite.com/2020/03/10/25.python%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E4%BD%A0%E6%B3%A8%E6%84%8F%E5%88%B0%E4%BA%86%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/03/10/25.python%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E4%BD%A0%E6%B3%A8%E6%84%8F%E5%88%B0%E4%BA%86%E5%90%97%EF%BC%9F/</id>
    <published>2020-03-10T08:07:41.000Z</published>
    <updated>2020-03-20T06:38:07.885Z</updated>
    
    <content type="html"><![CDATA[<center>Author：BIGOcean</center><p>本文将对一些小知识进行汇总，这些知识也许你用了 <code>python</code> 很久，但仍然没注意到。</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="1-操作文件的-x-模式"><a href="#1-操作文件的-x-模式" class="headerlink" title="1.操作文件的 x 模式"></a>1.操作文件的 x 模式</h2><p>对文件进行操作的 <code>opend</code> 函数大家都很熟悉，但是你注意到它还有一种模式为 <code>x</code> 吗？</p><p>今天闲的无聊，翻了翻 <code>python</code> 的文档（电脑保存的 <code>python</code> 文档为3.8.2版本），然后发现：不光有 <code>a</code> 、<code>w</code>、<code>b</code> 、<code>r</code> 、<code>+</code> 模式，竟然还有一种模式为 <code>x</code>，下面讲一下吧。</p><p>官方文档称：在 3.3 版本中，增加了 <code>x</code> 模式，它表示创建一个文件，如果文件已经存在，会报错 <code>FileExistsError</code> 。还需要注意一点，在 3.3 版本以后，曾经的 <code>IOError</code> 被别名为 <code>OSError</code>。</p><h2 id="2-协程库-asyncio"><a href="#2-协程库-asyncio" class="headerlink" title="2.协程库 asyncio"></a>2.协程库 asyncio</h2><p>之前常用第三方库 <code>greentlet</code> 和 <code>gevent</code> 来创建协程，后来在 3.4 版本后，<code>python</code> 自身引入了一个协程库 <code>asyncio</code> 。它用来实现异步 <code>I/O</code>。下面看一下示例代码： </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello ...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'... main_one!'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello ...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'... main_two!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建 task 列表。ensure_future() 函数会返回 task 对象</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>main_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>main_two<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用 get_event_loop() 方法创建一个事件循环</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多个任务（即 task 列表）使用 wait() 方法执行</span><span class="token comment" spellcheck="true"># 然后再调用 run_until_complete() 函数将协程注册到事件循环中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python">hello <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>hello <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> main_one!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> main_two!</code></pre><h2 id="3-装饰器-wraps"><a href="#3-装饰器-wraps" class="headerlink" title="3.装饰器 wraps"></a>3.装饰器 wraps</h2><p>模块 <code>functools</code> 中的 <code>wraps</code> ，会让使用了装饰器的函数伪装的更像原函数，也就是将原函数的属性赋值给使用了装饰器后的原函数。这句话可能比较难理解，我们先来回顾一下什么是装饰器？<strong>装饰器就是在不改变现有函数基础上，为函数增加功能的一个函数，它使用闭包来实现。闭包的规则为在函数内部定义了一个函数，内部函数使用了外部函数的变量，外部函数返回了内部函数的引用。</strong>有一点需要注意：虽然被装饰器装饰的函数仍然可以使用原名称调用，但是其实质上指向了装饰器的内函数。通过以下示例进行说明：</p><p>1) 先来一个普通的装饰器使用示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个装饰器</span><span class="token keyword">def</span> <span class="token function">eg_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是装饰器啊...'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token comment" spellcheck="true"># 使用定义的装饰器装饰函数</span>@eg_decorator<span class="token keyword">def</span> <span class="token function">noname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是示例函数噻...'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span>noname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印函数的 __name__ 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>noname<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""结果是：我是装饰器啊...我是示例函数噻...wrapper"""</span></code></pre><p>可以看到函数 <code>noname()</code> 的属性 <code>__name__</code> 的值为 <code>wrapper</code> ，即函数 <code>noname()</code> 指向的是装饰器的内函数。</p><p>2) 接下来请出今天的主角 <code>wraps</code>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps  <span class="token comment" spellcheck="true"># &lt;-- 导入模块</span><span class="token comment" spellcheck="true"># 定义一个装饰器</span><span class="token keyword">def</span> <span class="token function">eg_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;-- 使用装饰器</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是装饰器啊...'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token comment" spellcheck="true"># 使用定义的装饰器装饰函数</span>@eg_decorator<span class="token keyword">def</span> <span class="token function">noname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是示例函数噻...'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span>noname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印函数的 __name__ 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>noname<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""结果是：我是装饰器啊...我是示例函数噻...noname"""</span></code></pre><p>可以看到 <code>__name__</code> 属性的值被修改为函数 <code>noname</code> 自己。</p><p>也许大家会问这有什么用？很久很久以前，在一个 <code>Flask</code> 项目中曾经出现过一个 <code>bug</code> ：给视图函数添加了自定义的装饰器之后（该装饰器会验证用户是否登录），再用 <code>@app.route(&quot;/index&quot;)</code> 绑定路径，会报错「你添加路径的视图函数已经绑定了其他路径」。这是因为路径会绑定自定义装饰器的内函数，之前其他视图绑定的其实并不是视图本身，而是自定义装饰器的内函数，这次实质上也去绑定内函数，所以会报错。通过查看底层代码是因为 <code>Flask</code> 的路由地址根据属性 <code>__name__</code> 绑定视图名称。</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Author：BIGOcean&lt;/center&gt;

&lt;p&gt;本文将对一些小知识进行汇总，这些知识也许你用了 &lt;code&gt;python&lt;/code&gt; 很久，但仍然没注意到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker容器网桥连接</title>
    <link href="http://yoursite.com/2020/03/07/17.docker%E5%AE%B9%E5%99%A8%E7%BD%91%E6%A1%A5%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2020/03/07/17.docker%E5%AE%B9%E5%99%A8%E7%BD%91%E6%A1%A5%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-03-07T09:56:51.000Z</published>
    <updated>2020-03-23T08:32:44.564Z</updated>
    
    <content type="html"><![CDATA[<p>容器之间如何互相通讯？具体的命令有哪些？</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h1 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h1><p>网桥可以简单的理解为「局域网」，使加入网桥的容器之间可以互相通讯、暴露全部链接，同时与外界又保证了相对隔离的运行环境。</p><h2 id="1-创建网桥"><a href="#1-创建网桥" class="headerlink" title="1.创建网桥"></a>1.创建网桥</h2><p>命令：</p><pre class=" language-shell"><code class="language-shell">docker network create --driver bridge [网桥名称]</code></pre><blockquote><p>参数 <code>--driver bridge</code> 是默认配置，可写可不写</p></blockquote><h2 id="2-连接网桥"><a href="#2-连接网桥" class="headerlink" title="2.连接网桥"></a>2.连接网桥</h2><p>连接网桥分为两种方式，一种是在创建容器时链接网桥，一种是在容器运行时链接网桥。</p><p>1) 创建容器时：</p><pre class=" language-shell"><code class="language-shell">docker create --name [容器名称] --network [网桥名称] [镜像名称]</code></pre><p>2) 容器运行状态时：</p><pre class=" language-shell"><code class="language-shell">docker network connect [网桥名称] [容器名称]</code></pre><h2 id="3-查看所有网桥"><a href="#3-查看所有网桥" class="headerlink" title="3.查看所有网桥"></a>3.查看所有网桥</h2><p>命令：</p><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre><h2 id="4-查看某网桥的配置信息"><a href="#4-查看某网桥的配置信息" class="headerlink" title="4.查看某网桥的配置信息"></a>4.查看某网桥的配置信息</h2><p>命令：</p><pre class=" language-shell"><code class="language-shell">docker network inspect [网桥id或者名称]</code></pre><h2 id="5-删除自定义网桥"><a href="#5-删除自定义网桥" class="headerlink" title="5.删除自定义网桥"></a>5.删除自定义网桥</h2><p>命令：</p><pre class=" language-shell"><code class="language-shell">docker network rm [网桥id或者名称]</code></pre><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      容器之间如何互相通讯？具体的命令有哪些？
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>docker容器数据持久化</title>
    <link href="http://yoursite.com/2020/03/06/16.docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/06/16.docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2020-03-06T10:04:08.000Z</published>
    <updated>2020-03-23T08:31:20.254Z</updated>
    
    <content type="html"><![CDATA[<p><code>docker</code> 容器内的数据是独立于镜像之外的，那么如何将其持久化到宿主机呢？答案便是利用「数据卷」，那什么又是「数据卷」呢？</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><p><strong>数据卷其实就是一个目录或者一个文件</strong>，该目录（或文件）可以存在于宿主机上。将此目录（或文件）映射到容器中，便可以持久化容器内的数据到宿主机。如果目录不存在于宿主机上，而是存在于一个容器内部，那么此容器便可以被称为「<strong>数据卷容器</strong>」</p><p>下面讲解一下具体的操作方式。</p><h2 id="1-持久化到目录"><a href="#1-持久化到目录" class="headerlink" title="1.持久化到目录"></a>1.持久化到目录</h2><p>数据卷如果是宿主机的一个目录，可以进行如下操作将容器内的数据持久化：</p><h3 id="1-1-命令介绍"><a href="#1-1-命令介绍" class="headerlink" title="1.1 命令介绍"></a>1.1 命令介绍</h3><pre class=" language-shell"><code class="language-shell">docker run -itd --name [容器名字] -v [宿主机目录]:[容器目录] [镜像名称] [命令(可选)]</code></pre><p>该命令<strong>解读</strong>：通过一个镜像启动一个容器。利用 <code>--name</code> 指定容器的名称；利用 <code>-v</code> 指定宿主机的某目录作为数据卷挂载到容器中，使该容器与宿主机共享此目录 。</p><blockquote><p><strong>注意</strong>：1.如果本地路径不存在，<code>docker</code> 会贴心的自动创建。2.宿主机的目录请使用<strong>绝对路径</strong>。</p></blockquote><h3 id="1-2-操作"><a href="#1-2-操作" class="headerlink" title="1.2 操作"></a>1.2 操作</h3><p>1) 执行如下命令，将宿主机的 <code>/Users/ethanyan/dockerdata/</code> 目录映射到新创建的 <code>nginx</code> 容器中的 <code>/data</code> 目录：</p><pre class=" language-shell"><code class="language-shell">docker run -itd --name nginx -v /Users/ethanyan/dockerdata:/data nginx</code></pre><p>2) 接下来验证是否生效，先在本地共享目录下创建一个新目录 <code>NG</code>：</p><pre class=" language-shell"><code class="language-shell">cd /Users/ethanyan/dockerdatamkdir NG</code></pre><p>3) 进入容器 <code>nginx</code> 中看是否存在 <code>NG</code> 目录：</p><pre class=" language-shell"><code class="language-shell">docker exec -it nginx /bin/bashroot@81bbc2c2bf5c:/# cd /data/root@81bbc2c2bf5c:/data# lsNG</code></pre><blockquote><p>可发现在本地创建目录后，容器内的确实也出现了新建的目录。</p></blockquote><p>4) 反向进行操作。在容器的 <code>/data/NG</code> 目录中创建一个文件 <code>testdata.txt</code> ，退出容器后发现本地也出现了该文件。从而得出<strong>使用此方法可以让容器和宿主机共享目录，并将容器内的数据持久化到本地</strong>。</p><h2 id="2-持久化到文件"><a href="#2-持久化到文件" class="headerlink" title="2.持久化到文件"></a>2.持久化到文件</h2><h3 id="2-1-命令介绍"><a href="#2-1-命令介绍" class="headerlink" title="2.1 命令介绍"></a>2.1 命令介绍</h3><pre class=" language-shell"><code class="language-shell">docker run -itd --name [容器名字] -v [宿主机文件]:[容器文件] [镜像名称] [命令(可选)]</code></pre><blockquote><p><code>-d</code> 是创建容器后，使其在后台持续运行。</p></blockquote><h3 id="2-2-操作"><a href="#2-2-操作" class="headerlink" title="2.2 操作"></a>2.2 操作</h3><p>1) 执行如下命令，将本地的 <code>testdata.txt</code> 文件映射到容器的 <code>testdata.txt</code> 文件：</p><pre class=" language-shell"><code class="language-shell">docker run -itd --name nginx_test -v /Users/ethanyan/dockerdata/NG/testdata.txt:/data/testdata.txt nginx</code></pre><blockquote><p>同样是创建了一个容器，此容器基于镜像 <code>nginx</code> ，并命名为 <code>nginx_test</code> 。</p></blockquote><p><strong>注意：</strong>宿主机要映射的文件与容器内的文件名称可以不同，但是文件类型必须相同！</p><p>2) 接下来同样验证一下此操作。在本地的文件 <code>/Users/ethanyan/dockerdata/NG/testdata.txt</code> 中写入 <code>hello world</code></p><pre class=" language-shell"><code class="language-shell">cd /Users/ethanyan/dockerdata/NG/echo 'hello world' > testdata.txt</code></pre><p>3) 进入容器内，执行下列操作：</p><pre class=" language-shell"><code class="language-shell">root@8694fd7cba10:/# cd /dataroot@8694fd7cba10:/data# lstestdata.txtroot@8694fd7cba10:/data# cat testdata.txthello world</code></pre><p>4) 验证了宿主机修改文件后容器内文件也被修改。接下来我们在容器内修改一下内容，看本地是否也被修改：</p><pre class=" language-shell"><code class="language-shell">docker exec -it nginx /bin/bashroot@8694fd7cba10:/# cd /dataroot@8694fd7cba10:/data# lstestdata.txtroot@8694fd7cba10:/data# echo 'xxx测试用' >> testdata.txtroot@8694fd7cba10:/data# cat testdata.txthello worldxxx测试用root@8694fd7cba10:/data# exitexit</code></pre><p>) 然后在本地查看发现内容也被更改。<strong>说明可以使用文件持久化数据</strong>。</p><h2 id="3-持久化到容器"><a href="#3-持久化到容器" class="headerlink" title="3.持久化到容器"></a>3.持久化到容器</h2><p>如果不想这些数据直接暴露在宿主机，可以使用数据卷容器的方式。将数据卷容器挂载到其他容器，就可以多个容器之间共享数据了，而且还可以持久化的保存数据（后面会讲解如何备份和恢复数据卷容器）</p><p><strong>注意：数据卷容器不启动</strong></p><h3 id="3-1-步骤"><a href="#3-1-步骤" class="headerlink" title="3.1 步骤"></a>3.1 步骤</h3><p>1) 创建数据卷容器</p><p>2) 将数据卷容器挂载到其他容器 </p><p><strong>注意：使用数据卷容器是容器之间共享数据，不涉及宿主机，因此数据没有在宿主机上。</strong></p><h3 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h3><p>1) 创建一个数据卷容器：</p><pre class=" language-shell"><code class="language-shell"># 命令docker create -v [容器数据卷目录] --name [容器名字] [镜像名称] [命令(可选)]# 示例docker create -v /data/ --name data nginx</code></pre><blockquote><p>既然需要创建一个数据卷容器，那么就需要使用镜像，因为我电脑只有一个 <code>nginx</code> 镜像，那么使用它即可。一般大家都习惯使用 <code>centos</code> 或者 <code>Ubuntu</code> 作为基础镜像</p></blockquote><p>2) 创建两个容器（为了测试是否可以在容器间共享数据），并都挂载数据卷容器：</p><pre class=" language-shell"><code class="language-shell"># 创建容器并挂载数据卷命令docker run --volumes-from [数据卷容器 id/name] -itd --name [容器名字] [镜像名称] [命令(可选)]# 示例 docker run  --volumes-from db847d3fc055 -itd --name nginx_test1 nginx /bin/bashdocker run  --volumes-from db847d3fc055 -itd --name nginx_test2 nginx /bin/bash# 注意：db847d3fc055 为数据卷容器id</code></pre><p>3) <strong>验证操作</strong></p><p>先进入容器 <code>nginx_test1</code> 中进行操作，创建一个文件：</p><pre class=" language-shell"><code class="language-shell">docker exec -it nginx_test1 /bin/bashroot@72abfcc9e2e9:/# ls /data/root@72abfcc9e2e9:/# touch /data/file.txtroot@72abfcc9e2e9:/# ls /data/file.txtroot@72abfcc9e2e9:/# exitexit</code></pre><p>进入容器 <code>nginx_test2</code> 验证，并修改文件内容进行反向验证：</p><pre class=" language-shell"><code class="language-shell">docker exec -it nginx_test2 /bin/bashroot@c5f2c2463640:/# ls /data/file.txtroot@c5f2c2463640:/# echo 'hello world' > /data/file.txtroot@c5f2c2463640:/# exitexit</code></pre><p>然后再进入容器 <code>nginx_test1</code> 验证：</p><pre class=" language-shell"><code class="language-shell">docker exec -it nginx_test1 /bin/bashroot@72abfcc9e2e9:/# ls /data/file.txtroot@72abfcc9e2e9:/# cat /data/file.txthello worldroot@72abfcc9e2e9:/# exitexit</code></pre><h3 id="3-3-备份与恢复"><a href="#3-3-备份与恢复" class="headerlink" title="3.3 备份与恢复"></a>3.3 备份与恢复</h3><p><strong>数据卷容器</strong>的备份与恢复并不是<strong>容器</strong>的备份与恢复，实质上是<strong>数据</strong>的备份与恢复。</p><blockquote><p>这句话你品，你细品！</p></blockquote><h4 id="3-3-1-备份"><a href="#3-3-1-备份" class="headerlink" title="3.3.1 备份"></a>3.3.1 备份</h4><p>命令：</p><pre class=" language-shell"><code class="language-shell">docker run -it --volumes-from [数据卷容器id或者name] -v [宿主机存放备份文件的目录]:[容器内存放备份文件目录] [镜像] tar cvf [备份文件路径] [要备份的目录]</code></pre><p>我们执行示例命令：</p><pre class=" language-shell"><code class="language-shell">docker run -it --volumes-from data -v /Users/ethanyan/dockerdata/:/backup nginx tar cvf /backup/backup.tar /datatar: Removing leading `/' from member names/data//data/file.txt</code></pre><p>该命令是加载数据卷容器并将容器内的 <code>/data</code> 目录打包，然后把压缩包保存到 映射到容器内 的新数据卷，本地目录为 <code>/Users/ethanyan/dockerdata/</code> 。执行完后，会在本地该目录出现压缩包 <code>backup.tar</code>。</p><p><strong>注意：</strong></p><p>1) 备份的命令执行完后会创建出一个临时容器，删除即可。重要的是压缩包。</p><blockquote><p>之所以会出现一个临时容器，是因为备份的原理是：创建一个新的容器挂载数据卷容器，而且此容器还与宿主机共享了一个目录（新数据卷），执行打包命令将数据卷容器内的数据打包保存到共享目录中，所以本地会出现一个压缩包。</p></blockquote><h4 id="3-3-2-恢复"><a href="#3-3-2-恢复" class="headerlink" title="3.3.2 恢复"></a>3.3.2 恢复</h4><p>请保存好备份的压缩包文件，恢复时用得到。</p><p><strong>步骤：</strong></p><p>1) 创建一个新的数据卷容器 <code>data_new</code></p><pre class=" language-shell"><code class="language-shell">docker create -v /data/ --name data_new nginx</code></pre><p>2) 恢复之前的备份文件</p><pre class=" language-shell"><code class="language-shell"># 命令docker run --volumes-from [新创建的数据卷容器id或者name] -v [宿主机存放备份文件的目录]:[容器内存放备份文件目录] [镜像] tar xvf [备份文件]# 执行示例命令docker run --volumes-from data_new -v /Users/ethanyan/dockerdata/:/backup nginx tar xvf /backup/backup.tardata/data/file.txt</code></pre><p>3) 为了验证是否恢复，我们可以新创建一个容器并挂载新的数据卷容器：</p><pre class=" language-shell"><code class="language-shell">docker run  --volumes-from data_new -itd --name nginx_test6 nginx /bin/bashdocker exec -it nginx_test6 /bin/bashroot@2b54f0bfefbe:/# ls /datafile.txtroot@2b54f0bfefbe:/# cat /data/file.txthello world</code></pre><p>可看到数据卷容器已经恢复。</p><h4 id="3-3-3-备份与恢复的原理"><a href="#3-3-3-备份与恢复的原理" class="headerlink" title="3.3.3 备份与恢复的原理"></a>3.3.3 备份与恢复的原理</h4><p>不管是备份还是恢复，我们都使用了一个中间介质，此介质便是一个容器。因为数据卷容器是不启动的，为了备份数据，我们就需要使用一个挂载了此数据卷容器的中间介质（容器）。此介质不光要能连接数据卷容器，还需要连接本地，因此我们又将本地的一个目录映射到了中间介质中。</p><p>备份就是中间介质将数据卷容器的目录打包后，再通过映射的目录共享给本地，所以本地会出现一个压缩包。容器列表多了一个新的容器，此容器便是中间介质。</p><p>恢复就是中间介质通过映射到容器的共享目录，读取到本地的备份文件（压缩包），然后在容器内部解压缩，数据就恢复到了挂载的数据卷容器中。</p><blockquote><p>当然，此中间介质也可以使用 <code>--name</code> 参数命名，便于删除。</p></blockquote><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      docker容器数据持久化
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>分享一份全国行政区划sql数据库表</title>
    <link href="http://yoursite.com/2020/03/04/%E5%88%86%E4%BA%AB%E4%B8%80%E4%BB%BD%E5%85%A8%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92sql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/03/04/%E5%88%86%E4%BA%AB%E4%B8%80%E4%BB%BD%E5%85%A8%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92sql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8/</id>
    <published>2020-03-04T13:53:18.000Z</published>
    <updated>2020-03-19T16:50:55.331Z</updated>
    
    <content type="html"><![CDATA[<center>Author：BIGOcean</center><p>还在为寻找全国行政区划的数据而烦恼吗？还在因为一个 <code>Excel</code> 表格无法确定信息是否全面而惆怅吗？快来看看为你准备好的东西吧！</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在软件开发的过程中，最基础最重要但是又最不容易寻找的一份数据便是「全国行政区划信息」。为了解决大家的烦恼，此处提供一份 <code>sql</code> 数据库文件，直接导入即可使用，省时省力，快来实践一下吧。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>关系数据库（本人使用的数据库为 <code>MySQL8.0.19</code>）</p><h2 id="2-文件"><a href="#2-文件" class="headerlink" title="2.文件"></a>2.文件</h2><p>数据库文件为 <code>AREAS.sql</code>，数据条数为 3487 ，十分全面的涵盖了全国的省市县等信息。</p><blockquote><p> 此文件包括建表以及准备的数据</p></blockquote><p><strong>获取方式：</strong>关注公众号「全栈技术精选」，后台回复关键字「全国行政区划信息」即可获取。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><p>1) 先将获取到的文件 <code>AREAS.sql</code> 放到任意目录下（比如目录 <code>sqlfile</code> ），然后进入此目录：</p><pre class=" language-shell"><code class="language-shell">cd sqlfile</code></pre><p>2) 先进入数据库（以 <code>mysql</code> 为例）：</p><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><p>3) 创建数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> area<span class="token punctuation">;</span></code></pre><p>4) 使用此数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> area<span class="token punctuation">;</span></code></pre><p>5) 导入行政区划数据表：</p><pre class=" language-sql"><code class="language-sql">source AREAS<span class="token punctuation">.</span>sql<span class="token punctuation">;</span></code></pre><h3 id="3-1-注意"><a href="#3-1-注意" class="headerlink" title="3.1 注意"></a>3.1 注意</h3><p>1) 获取到的数据库文件 <code>AREAS.sql</code> 为表结构以及表数据，因此需要先有一个数据库（此数据库可以新建或者使用已存在的数据库）</p><p>2) 导入数据库文件时，如果没有执行刚开始切换到 <code>AREAS.sql</code> 文件所在目录的步骤，可以通过写文件的绝对路径方式解决</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Author：BIGOcean&lt;/center&gt;

&lt;p&gt;还在为寻找全国行政区划的数据而烦恼吗？还在因为一个 &lt;code&gt;Excel&lt;/code&gt; 表格无法确定信息是否全面而惆怅吗？快来看看为你准备好的东西吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://yoursite.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>一起来看看火爆的手机号码一键登录</title>
    <link href="http://yoursite.com/2020/03/03/9.%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%9C%8B%E7%9C%8B%E7%81%AB%E7%88%86%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E4%B8%80%E9%94%AE%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2020/03/03/9.%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%9C%8B%E7%9C%8B%E7%81%AB%E7%88%86%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E4%B8%80%E9%94%AE%E7%99%BB%E5%BD%95/</id>
    <published>2020-03-03T13:41:59.000Z</published>
    <updated>2020-03-23T07:03:01.458Z</updated>
    
    <content type="html"><![CDATA[<p>不知你是否发现：大批手机 <code>app</code> 登录页面，突然之间变成了一键登录。之前大火的 <code>通过手机号码获取短信验证码</code> 登录模式正悄悄退去。这神奇的操作是如何实现的呢？</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>之前所有的登录页面千篇一律为「手机号」「验证码」（暂且忽略账号密码以及第三方登录模式），这是因为想要验证「你就是你」，在手机号实名认证的时代，通过向号主本人发送验证码来验证登录是较为稳妥的方式，事实证明也的确如此。但是受网络延迟以及操作繁琐等影响，对于用户留存以及用户新增有着不小的挑战。</p><p>也许你会想 <code>APP</code> 直接读取手机号验证号主身份不就好了嘛？对不起，如果哪家公司公开窃取手机号，离监狱就是负距离。这时三家通讯公司瞄准了这一市场，开放了相关能力，即通过调用运营商的接口，判断用户输入的手机号与本机号码是否一致。但细细一想，用户还是需要填写手机号，如果运营商直接把手机号返回给我们，那该多棒啊！这么一来「一键登录」就诞生了。</p><blockquote><p>运营商是具备通过 <code>sim</code> 卡数据查询到手机号码的权限以及能力的。</p></blockquote><p>刚才说到三家运营商开放了相关接口，但是他们毕竟是竞争关系，彼此之间互不兼容，而且提供的优惠以及方式也是不同的。好比移动出了一款4G套餐100分钟500M；联通出了同价位套餐200分钟10G；电信一看不行，出了不限流量。作为用户的我们肯定会根据自身情况选择最合适的，但是一般也是只选其一。不要说你办了三家的卡，而且为了同时使用甚至买了三个手机，如果你是如此土豪，请收下我的膝盖。因此，对于我们应用，集成三家通讯商的 <code>SDK</code> 是不是有点不那么方便以及划算呢？第三方平台便应运而生，比如某蓝（因为他们公司至少有3个推广添加了我的微信，所以我印象颇深）。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>作为技术人员，其实最关心的还是实现方式。结合网上各个平台的调用方式，绘制了此图：</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E4%B8%80%E9%94%AE%E7%99%BB%E5%BD%95.png" alt="揭秘一键登录"></p><p>1) 用户打开 <code>app</code> 请求登录</p><p>2) 显示登录， <code>app</code> 通过内置的认证 <code>SDK</code> 向运营商获取手机号码</p><p>3) 获取成功时，为用户展示授权页面（就是是否一键登录）</p><p>4) 等待用户进行点击授权</p><p>5) 用户同意授权</p><p>6) <code>SKD</code> 得到授权之后，获取 <code>token</code> ，然后向 <code>app</code> 返回接口调用 <code>token</code></p><p>7) <code>app</code> 向 <code>app服务器</code> 传递获取到的 <code>token</code></p><p>8) <code>app服务器</code> 拿着客户端传过来的 <code>token</code> 请求 <code>认证服务器</code> 获取手机号码接口</p><p>9) <code>认证服务器</code> 返回手机号码给应用服务器</p><p>10) 登录成功</p><h2 id="3-后话"><a href="#3-后话" class="headerlink" title="3.后话"></a>3.后话</h2><p>虽然一键登录不仅比短信验证码收取的费用便宜相差不大，但是其节省的时间以及简化的操作无疑能增加新用户的注册体验。</p><p>对了，还有一点你需要知道，那就是这一操作必须建立在拥有顺畅的网络基础之上。</p><blockquote><p>三大运营商提供的接口操作对网络要求各不相同，但都<strong>&lt;不支持 <code>WiFi</code> 无线网络&gt;</strong>，最好是 <code>3G</code> +</p></blockquote><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      一起来看看火爆的手机号码一键登录
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="网络类" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库之存储过程</title>
    <link href="http://yoursite.com/2020/02/25/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/02/25/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2020-02-25T10:48:02.000Z</published>
    <updated>2020-03-20T06:40:51.573Z</updated>
    
    <content type="html"><![CDATA[<center>Editor：BIGOcean</center><p>很多人在上学期间，也许并未学习过关系数据库中「存储过程」的相关内容，那今天就来学习一下吧。</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><p>无论是 <code>MySQL</code> 还是 <code>SQL Server</code> 数据库，最新版本都已支持『存储过程』。但是为了通用性，本文章以 <code>MySQL</code> 为例。</p><blockquote><p>因为 <code>SQL Server</code> 数据库为商业软件，所以其使用率较开源的 <code>MySQL</code> 来说要低一些。对于大数据处理来说， <code>MySQL</code> 更有优势，这就更使得很多中型、大型网站都使用 <code>MySQL</code> 。二者语法上也有些许差别，考虑到学习之后的应用情况，特选 <code>MySQL</code>。</p></blockquote><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>存储过程『<code>Stored Procedure</code>』是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象，即面向对象的思想。它通过编译后存储在数据库中，用户可以像调用函数一样通过特定的方式执行存储过程。</p><p>简单来讲，存储过程就是封装了一堆 <code>SQL</code> 语句，方便复用。如此直白，应该不会不理解了。</p><h3 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><p>1) 通过封装，隐藏执行的 <code>SQL</code> 语句，以及逻辑操作。</p><p>2) 可以像函数一样传递参数，并回传值。</p><h3 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><p>1) 存储过程根据数据库的不同而不同，<strong>移植性弱</strong>。比如切换不同厂商的数据库，由于编程语言的差别，需要重新编译。</p><p>2) 无法使用 <code>select</code> 指令来执行，它属于子程序，区别于用户定义的函数。</p><h2 id="2-创建和调用"><a href="#2-创建和调用" class="headerlink" title="2.创建和调用"></a>2.创建和调用</h2><p>1) 自定义结束符号。一般在 <code>mysql</code> 中，我们使用封号来结束语句，可以临时修改为其他符号：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 将语句的结束符号从分号;临时改为两个$$或//(可以是自定义)</span><span class="token keyword">DELIMITER</span> $$或<span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span></code></pre><p>2) 创建存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </code></pre><p>3) 一个存储过程开始与结束符号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">BEGIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">END</span> </code></pre><p>4) 创建存储函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 存储函数名称<span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><p>5) 调用存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> 存储过程名称<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>6) 存储过程体以 <code>begin</code> 开始，以 <code>end</code> 结束，当然，这是可以嵌套的。</p><blockquote><p>注意：每个嵌套块以及其中的每条语句，都必须以封号结尾，最外层（表示过程体结束的 <code>begin-end</code> 块不需要写）</p></blockquote><p>7) 为每一个语句块打标签，可以增强可读性，并不易丢掉过多嵌套块中的某个结尾。</p><pre class=" language-sql"><code class="language-sql">label1: <span class="token keyword">BEGIN</span>　　label2: <span class="token keyword">BEGIN</span>　　　　label3: <span class="token keyword">BEGIN</span>　　　　　　statements<span class="token punctuation">;</span> 　　　　<span class="token keyword">END</span> label3 <span class="token punctuation">;</span>　　<span class="token keyword">END</span> label2<span class="token punctuation">;</span><span class="token keyword">END</span> label1</code></pre><h3 id="2-1-示例"><a href="#2-1-示例" class="headerlink" title="2.1 示例"></a>2.1 示例</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> $$　　<span class="token comment" spellcheck="true">-- 将语句的结束符号从分号;临时改为两个$$(可以是自定义)</span>mysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> delete_matches<span class="token punctuation">(</span><span class="token operator">IN</span> p_playerno <span class="token keyword">INTEGER</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">BEGIN</span>    <span class="token operator">-</span><span class="token operator">></span> 　　<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> MATCHES    <span class="token operator">-</span><span class="token operator">></span>    <span class="token keyword">WHERE</span> playerno <span class="token operator">=</span> p_playerno<span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">END</span>$$Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">delimiter</span><span class="token punctuation">;</span>　　<span class="token comment" spellcheck="true">-- 将语句的结束符号恢复为分号</span></code></pre><p>上面的存储过程解读：存储过程名为「<code>delete_matches</code>」；存储过程需要传入的参数为 <code>INTEGER</code> 类型的 <code>p_playerno</code> （球员编号）；由 <code>BEGIN</code> 表示过程体开始，执行的语句为删除 <code>MATCHES</code> 表中字段 <code>playerno</code> 的值等于传入参数值的记录。以 <code>END</code> 表示过程体结束。</p><p>调用这一存储过程时：</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">call</span> delete_matches<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span></code></pre><h2 id="3-参数"><a href="#3-参数" class="headerlink" title="3.参数"></a>3.参数</h2><p>从示例中我们可以看到传入参数表示为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> delete_matches<span class="token punctuation">(</span><span class="token operator">IN</span> p_playerno <span class="token keyword">INTEGER</span><span class="token punctuation">)</span></code></pre><p>已知参数名称与参数类型，那么括号中 <code>IN</code> 代表什么意思呢？</p><p>答： <code>IN</code> 代表传入参数，也就是调用存储过程时，向存储过程内传入值。</p><p>除此之外还有另外两个参数：<code>OUT</code> 和 <code>INOUT</code></p><p><code>OUT</code> ：传出参数，也就是存储过程向调用者传出值。类似于程序中的 <code>return</code></p><p><code>INOUT</code>：传入传出参数，比如传入一个值，存储过程中引用后再修改，向调用者传出新值。</p><p><strong>变量赋值：</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> @变量<span class="token operator">=</span>值</code></pre><h3 id="3-1-in"><a href="#3-1-in" class="headerlink" title="3.1 in"></a>3.1 in</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> $$ <span class="token comment" spellcheck="true">-- 将语句的结束符号从分号;临时改为两个$$(可以是自定义)</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> in_param<span class="token punctuation">(</span><span class="token operator">in</span> p_in <span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">begin</span>    <span class="token operator">-</span><span class="token operator">></span> 　　<span class="token keyword">select</span> p_in<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询传入的变量</span>    <span class="token operator">-</span><span class="token operator">></span> 　　<span class="token keyword">set</span> p_in<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 重新设置变量</span>    <span class="token operator">-</span><span class="token operator">></span>    <span class="token keyword">select</span> P_in<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询修改后的变量</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span>$$mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> <span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token variable">@p_in</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--设置全局变量</span>mysql<span class="token operator">></span> <span class="token keyword">call</span> in_param<span class="token punctuation">(</span><span class="token variable">@p_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 调用存储过程，传入设置的变量值</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span><span class="token operator">|</span> p_in <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span><span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span><span class="token operator">|</span> P_in <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span><span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token variable">@p_in</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询全局变量</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span> <span class="token variable">@p_in</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span></code></pre><blockquote><p>以上可以看出，<code>p_in</code> 在存储过程中被修改，但并不影响 <code>@p_in</code> 的值，因为前者为局部变量、后者为全局变量。</p></blockquote><h3 id="3-2-out"><a href="#3-2-out" class="headerlink" title="3.2 out"></a>3.2 out</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> <span class="token comment" spellcheck="true">//</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> out_param<span class="token punctuation">(</span><span class="token keyword">out</span> p_out <span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span>   <span class="token keyword">begin</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">select</span> p_out<span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">set</span> p_out<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">select</span> p_out<span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>   <span class="token keyword">end</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//</span>mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> <span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token variable">@p_out</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">call</span> out_param<span class="token punctuation">(</span><span class="token variable">@p_out</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span> p_out <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token comment" spellcheck="true">-- 因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span> p_out <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token variable">@p_out</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> <span class="token variable">@p_out</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token comment" spellcheck="true">-- 调用了out_param存储过程，输出参数，改变了p_out变量的值</span></code></pre><h3 id="3-3-inout"><a href="#3-3-inout" class="headerlink" title="3.3 inout"></a>3.3 inout</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> $$mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> inout_param<span class="token punctuation">(</span><span class="token keyword">inout</span> p_inout <span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span>   <span class="token keyword">begin</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">select</span> p_inout<span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">set</span> p_inout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token keyword">select</span> p_inout<span class="token punctuation">;</span>    <span class="token operator">-</span><span class="token operator">></span>   <span class="token keyword">end</span>    <span class="token operator">-</span><span class="token operator">></span> $$mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> <span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token variable">@p_inout</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">call</span> inout_param<span class="token punctuation">(</span><span class="token variable">@p_inout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span><span class="token operator">|</span> p_inout <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span><span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span><span class="token operator">|</span> p_inout <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span><span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token variable">@p_inout</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token operator">|</span> <span class="token variable">@p_inout</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token operator">|</span>        <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token comment" spellcheck="true">-- 调用了inout_param存储过程，接受了输入的参数，也输出参数，改变了变量</span></code></pre><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h2><h3 id="4-1-变量声明"><a href="#4-1-变量声明" class="headerlink" title="4.1 变量声明"></a>4.1 变量声明</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> variable_name <span class="token punctuation">[</span><span class="token punctuation">,</span>variable_name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> datatype <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：局部变量声明一定要放置在存储过程体的开始。</p><p><code>datatype</code> 为 <code>MySQL</code> 的数据类型，如： <code>int</code>，<code>float</code>， <code>date</code>，<code>varchar(length)</code></p></blockquote><p><strong>示例：</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> l_int <span class="token keyword">int</span> unsigned <span class="token keyword">default</span> <span class="token number">4000000</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> l_numeric number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">9.95</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> l_date <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1999-12-31'</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> l_datetime <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1999-12-31 23:59:59'</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> l_varchar <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'This will not be padded'</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>unsigned</code> 就是将数字类型无符号化</p></blockquote><h3 id="4-2-变量赋值"><a href="#4-2-变量赋值" class="headerlink" title="4.2 变量赋值"></a>4.2 变量赋值</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> 变量名 <span class="token operator">=</span> 表达式值 <span class="token punctuation">[</span><span class="token punctuation">,</span>variable_name <span class="token operator">=</span> expression <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><h3 id="4-3-用户变量"><a href="#4-3-用户变量" class="headerlink" title="4.3 用户变量"></a>4.3 用户变量</h3><p>大家一定会有些迷惑，为什么有些变量是直接为变量名赋值，而有些变量则需要在变量名前加 <code>@</code> 呢？那是因为添加后，变为了用户变量名。</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'Ethan Yan'</span><span class="token punctuation">;</span>  mysql <span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token variable">@name</span><span class="token punctuation">;</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+  </span><span class="token operator">|</span>      <span class="token variable">@name</span>          <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+  </span><span class="token operator">|</span>      Ethan Yan      <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+  </span></code></pre><p>在存储过程中使用用户变量：</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GreetWorld<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token variable">@greeting</span><span class="token punctuation">,</span><span class="token string">' World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mysql <span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@greeting</span><span class="token operator">=</span><span class="token string">'Hello'</span><span class="token punctuation">;</span>  mysql <span class="token operator">></span> <span class="token keyword">CALL</span> GreetWorld<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+  </span><span class="token operator">|</span> CONCAT<span class="token punctuation">(</span><span class="token variable">@greeting</span><span class="token punctuation">,</span><span class="token string">' World'</span><span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+  </span><span class="token operator">|</span>  Hello World               <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span></code></pre><h2 id="5-注释"><a href="#5-注释" class="headerlink" title="5.注释"></a>5.注释</h2><p>单行注视：<code>--</code></p><p>多行注视：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 此处为多行注释*/</span></code></pre><h2 id="6-常用操作"><a href="#6-常用操作" class="headerlink" title="6.常用操作"></a>6.常用操作</h2><h3 id="6-1-MySQL-存储过程的查询"><a href="#6-1-MySQL-存储过程的查询" class="headerlink" title="6.1 MySQL 存储过程的查询"></a>6.1 MySQL 存储过程的查询</h3><p>1) 查询数据库中的所有存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'数据库名'</span><span class="token punctuation">;</span>或者<span class="token keyword">select</span> routine_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>routines <span class="token keyword">where</span> routine_schema<span class="token operator">=</span><span class="token string">'数据库名'</span><span class="token punctuation">;</span>或者<span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'数据库名'</span><span class="token punctuation">;</span></code></pre><p>2) 查询某个存储过程详细内容</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 数据库<span class="token punctuation">.</span>存储过程名<span class="token punctuation">;</span></code></pre><h3 id="6-2-MySQL-存储过程的修改"><a href="#6-2-MySQL-存储过程的修改" class="headerlink" title="6.2 MySQL 存储过程的修改"></a>6.2 MySQL 存储过程的修改</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span></code></pre><h3 id="6-3-MySQL-存储过程的删除"><a href="#6-3-MySQL-存储过程的删除" class="headerlink" title="6.3 MySQL 存储过程的删除"></a>6.3 MySQL 存储过程的删除</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span></code></pre><h3 id="6-4-MySQL-存储过程的控制语句"><a href="#6-4-MySQL-存储过程的控制语句" class="headerlink" title="6.4 MySQL 存储过程的控制语句"></a>6.4 MySQL 存储过程的控制语句</h3><p>1) <strong>变量作用域：</strong>局部变量在存储过程内优先级高，当执行到 <code>END</code> 时，局部变量消失。如果不想消失，可以通过参数 <code>OUT</code> 将其传出给调用者。</p><p>2) <strong>条件语句1：</strong> <code>if-then-else</code></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">then</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><p>3) <strong>条件语句2：</strong> <code>case</code> </p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc3 <span class="token punctuation">(</span><span class="token operator">in</span> parameter <span class="token keyword">int</span><span class="token punctuation">)</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">begin</span>      <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">declare</span> var <span class="token keyword">int</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> var<span class="token operator">=</span>parameter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">case</span> var       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">when</span> <span class="token number">0</span> <span class="token keyword">then</span>        <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span>        <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">else</span>        <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">case</span>    <span class="token keyword">when</span> var<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> var<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">when</span> var<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">else</span><span class="token keyword">end</span> <span class="token keyword">case</span></code></pre><p>4) 循环语句1 <code>while ···· end while</code></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">while</span> 条件 <span class="token keyword">do</span>    <span class="token comment" spellcheck="true">--循环体</span>endwhile</code></pre><p>5) 循环语句2 <code>repeat···· end repea</code></p><pre class=" language-sql"><code class="language-sql">repeat    <span class="token comment" spellcheck="true">--循环体</span>until 循环条件  <span class="token keyword">end</span> repeat<span class="token punctuation">;</span></code></pre><p>6) 循环语句3 <code>loop ·····endloop</code></p><p><code>loop</code> 循环不需要初始条件，这点和 <code>while</code> 循环相似，同时和 <code>repeat</code>循环一样不需要结束条件,<code>leave</code> 语句的意义是离开循环。</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc6 <span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">begin</span>      <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">declare</span> v <span class="token keyword">int</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> LOOP_LABLE:loop       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> v<span class="token operator">=</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">if</span> v <span class="token operator">>=</span><span class="token number">5</span> <span class="token keyword">then</span>      <span class="token operator">-</span><span class="token operator">></span> leave LOOP_LABLE<span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> loop<span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p><code>LABLES</code> 标号：标号可以用在<code>begin</code> <code>repeat</code> <code>while</code> 或者 <code>loop</code> 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p></blockquote><p>7) 迭代</p><p><code>ITERATE</code> 通过引用复合语句的标号，来从新开始复合语句：</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc10 <span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">begin</span>      <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">declare</span> v <span class="token keyword">int</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> LOOP_LABLE:loop       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">if</span> v<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">then</span>        <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> v<span class="token operator">=</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> ITERATE LOOP_LABLE<span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">set</span> v<span class="token operator">=</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">if</span> v<span class="token operator">>=</span><span class="token number">5</span> <span class="token keyword">then</span>      <span class="token operator">-</span><span class="token operator">></span> leave LOOP_LABLE<span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span> loop<span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">end</span><span class="token punctuation">;</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//  </span>mysql <span class="token operator">></span> <span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p>参考文章：</p><p><a href="https://www.cnblogs.com/geaozhang/p/6797357.html" target="_blank" rel="noopener">https://www.cnblogs.com/geaozhang/p/6797357.html</a></p><p><a href="http://blog.sina.com.cn/s/blog_86fe5b440100wdyt.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_86fe5b440100wdyt.html</a></p></blockquote><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Editor：BIGOcean&lt;/center&gt;

&lt;p&gt;很多人在上学期间，也许并未学习过关系数据库中「存储过程」的相关内容，那今天就来学习一下吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://yoursite.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之排序</title>
    <link href="http://yoursite.com/2020/02/15/6.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/02/15/6.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</id>
    <published>2020-02-15T01:16:01.000Z</published>
    <updated>2020-03-23T06:10:31.386Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>排序的归纳以及时间复杂度表</strong><br><img src="https://i.loli.net/2020/03/23/7KQYAkbX4RwBgml.png" alt="排序时间复杂度"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>冒泡排序是一个比较简单的排序，它是一次比较相邻两个元素的值，如何顺序错误就交换两个数的位置，一直到没有交换的数为止，排序结束。</strong></p><p><strong>若对n个数进行排序，我们需要n-1次比较，所以第k次比较需要进行n-k次比较。</strong>&gt;</p><blockquote><p>排序算法通过以数据对象的两两比较作为关键所以可以得出，冒泡排序需要进行的比较次数为：(n-1) + (n-2) + … + 1 = n<em>(n-1) / 2。<br>因此冒泡排序的  *</em>时间复杂度为O(n^2)**</p></blockquote><p><strong>算法</strong></p><ol><li>比较相邻的元素，前一个比后一个大（或者前一个比后一个小）调换位置</li><li>每一对相邻的元素进行重复的工作，从开始对一直到结尾对，这步完成后，结尾为做大或最小的数</li><li>针对除了最后一个元素重复进行上面的步骤。</li><li>重复1-3步骤直到完成排序</li></ol><p>动图演示：<br><img src="https://i.loli.net/2020/03/23/GZTE1u4xNa5sO3U.gif" alt="演示1"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//冒泡排序 从小到大</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">bubble_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>程序运行结果</strong><br><img src="https://i.loli.net/2020/03/23/kNrH89mGM3LPRXT.png" alt="冒泡排序"></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote><p>选择排序共需要的比较次数为n*(n-1) / 2，因此选择排序算法的时间复杂度与冒泡排序一样，也为O(n^2)</p></blockquote><p><strong>算法简介：</strong></p><ol><li><p>初始状态：序列为无序状态。</p></li><li><p>第1次排序：从n个元素中找出最小(大)元素与第1个记录交换</p></li><li><p>第2次排序：从n-1个元素中找出最小(大)元素与第2个记录交换</p></li><li><p>第i次排序：从n-i+1个元素中找出最小(大)元素与第i个记录交换</p></li><li><p>以此类推直到排序完成</p><p>动图演示<br><img src="https://i.loli.net/2020/03/23/GZTE1u4xNa5sO3U.gif" alt="演示2"></p></li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//选择排序 从大到小</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//函数申明</span><span class="token keyword">void</span> <span class="token function">choice</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">choice</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//选择排序</span><span class="token keyword">void</span> <span class="token function">choice</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token punctuation">,</span> j <span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>             tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//显示</span><span class="token keyword">void</span> <span class="token function">show</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果<br><img src="https://i.loli.net/2020/03/23/FcuD1isKLjmSqVT.png" alt="运行结果"> </p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote><p>插入排序是一个比较直观的算法，对于n个元素，一共需要进行n-1轮比较，而第k轮比较需要进行k次数组元素的两两比较，因此共需要进行的比较次数为：1 + 2 + … + (n-1)，所以插入排序的时间复杂度同冒泡排序一样，也为O(n^2)</p></blockquote><p><strong>算法简介：</strong></p><ol><li>从第一个元素开始，该元素可认为已排序。</li><li>取出下一个元素，在排序好的元素序列中从后往前扫描</li><li>如果元素(已排序)大于新元素，将该元素移到下一位置</li><li>重复3.直到找到已排序的元素小于或等于新元素的位置</li><li>将新元素插入该位置后</li><li>重复2-5直到排序完成</li></ol><p><strong>动图演示</strong><br> <img src="https://i.loli.net/2020/03/23/xJ8Z5zAPDG1yawm.gif" alt="演示3"></p><p><strong>代码部分</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//插入排序(从小到大) </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//定义一个插入函数"insertion_sort" </span><span class="token keyword">void</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>number<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ii<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//循环遍历 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将temp每一次赋值为number[i] </span>        temp<span class="token operator">=</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          ii<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//这里改顺序 (temp后的)"&lt;"为小到大，">"为大到小 ！！！</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ii<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;</span>number<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将大的元素往前放 </span>            number<span class="token punctuation">[</span>ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">;</span>               ii<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        number<span class="token punctuation">[</span>ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//与"number[ii+1]=number[ii];"一起意为 </span>    <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">//如果插入的数比之前的大,将number[ii]与number[ii+1]互换 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果<br><img src="https://i.loli.net/2020/03/23/Je2jSTp85luKMZt.png" alt="运行结果"></p><hr><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      C语言排序算法
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法类" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E7%B1%BB/"/>
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>单片机开发板引脚图</title>
    <link href="http://yoursite.com/2020/02/12/5.%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91%E6%9D%BF%E5%BC%95%E8%84%9A%E5%9B%BE/"/>
    <id>http://yoursite.com/2020/02/12/5.%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91%E6%9D%BF%E5%BC%95%E8%84%9A%E5%9B%BE/</id>
    <published>2020-02-12T02:20:53.000Z</published>
    <updated>2020-03-23T05:17:02.684Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="Arduino-开发板引脚图"><a href="#Arduino-开发板引脚图" class="headerlink" title="Arduino 开发板引脚图"></a>Arduino 开发板引脚图</h2><p><img src="https://i.loli.net/2020/03/23/RtHcZmr7dW5ljJ1.png" alt="1"><br><img src="https://i.loli.net/2020/03/23/YTt1iCPKv9AxVLr.png" alt="2"></p><p><img src="https://i.loli.net/2020/03/23/XnrG3CcTbEVhYPJ.png" alt="3"><br><img src="https://i.loli.net/2020/03/23/qjebOdw6RU9vaiL.png" alt="4"></p><h2 id="esp8266-引脚图"><a href="#esp8266-引脚图" class="headerlink" title="esp8266 引脚图"></a>esp8266 引脚图</h2><p><img src="https://i.loli.net/2020/03/23/HwY2Ao1W9UfmcQJ.png" alt="5"></p><p><img src="https://i.loli.net/2020/03/23/uqnUV62XZw13ghG.png" alt="6"></p><h2 id="STC89C51单片机引脚图"><a href="#STC89C51单片机引脚图" class="headerlink" title="STC89C51单片机引脚图"></a>STC89C51单片机引脚图</h2><p><img src="https://i.loli.net/2020/03/23/PQxlYmaVji6D4rF.png" alt="7"></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      C语言学习
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库之视图</title>
    <link href="http://yoursite.com/2020/02/10/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2020/02/10/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E8%A7%86%E5%9B%BE/</id>
    <published>2020-02-10T11:32:24.000Z</published>
    <updated>2020-03-19T16:50:55.821Z</updated>
    
    <content type="html"><![CDATA[<center>Author：BIGOcean</center><p>请问视图是什么？视图相关语句有哪些？视图在什么场景下使用？夺命三连</p><a id="more"></a><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><p>对于关系数据库来说，绕不开的一个概念便是『视图』，带着篇首的几个问题，我们来认真学习一下。</p><h2 id="视图是什么"><a href="#视图是什么" class="headerlink" title="视图是什么"></a>视图是什么</h2><p>官方文档中如此描述视图：A view is a stored SELECT statement（视图是存储的 <code>SELECT</code> 语句）。我们需要注意，<strong>视图实质上是一组查询语句，是一张虚拟表（可视化的表）而非真正的表</strong>。它将单张表或者多张表中的某些字段或全部字段使用一些特定的查询组合成一张可见的表，如同一张真实的表一样。</p><h2 id="视图相关语法"><a href="#视图相关语法" class="headerlink" title="视图相关语法"></a>视图相关语法</h2><h3 id="1-创建视图"><a href="#1-创建视图" class="headerlink" title="1. 创建视图"></a>1. 创建视图</h3><p>执行以下语句创建一个非常简单的视图，该视图执行 <code>SELECT</code> 语句，并将产品的名称和价格返回给用户。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> vw_Names     <span class="token keyword">AS</span>     <span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> Price <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>  GO</code></pre><h3 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="2. 删除视图"></a>2. 删除视图</h3><p>使用 <code>DROP</code> 语句删除视图 <code>vw_Names</code>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> vw_Names<span class="token punctuation">;</span>  GO  </code></pre><h3 id="3-查询视图"><a href="#3-查询视图" class="headerlink" title="3. 查询视图"></a>3. 查询视图</h3><p>如同查询表一样，可以做一些查询操作，比如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vw_Names</code></pre><p>当然也可以添加一些条件：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vw_Names <span class="token keyword">WHERE</span> ProductName<span class="token operator">=</span><span class="token string">'武汉热干面'</span></code></pre><h3 id="4-更新视图"><a href="#4-更新视图" class="headerlink" title="4.更新视图"></a>4.更新视图</h3><p>使用 <code>SQL CREATE OR REPLACE VIEW</code> 语法来进行更新。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">VIEW</span> 视图名称 <span class="token keyword">AS</span><span class="token keyword">SELECT</span> 字段名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> 表名<span class="token keyword">WHERE</span> 条件</code></pre><p><strong>注意：此处的更新实质上是更新视图的查询语句，看到的效果便是展示的数据发生了变化</strong></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>比如我们要在视图 <code>vw_Names</code> 中添加一个字段 <code>Counts</code>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> vw_Names     <span class="token keyword">AS</span>     <span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> Price<span class="token punctuation">,</span> Counts <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>  GO</code></pre><h2 id="视图适用场景"><a href="#视图适用场景" class="headerlink" title="视图适用场景"></a>视图适用场景</h2><ol><li>因权限问题或者数据敏感，不能向外透露全部字段信息</li><li>查询逻辑复杂，再与其他表进行关联使得语句更复杂，使用视图后，可简单的将其理解为一个变量</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>我们在使用视图的时候，相当于执行了视图中的查询语句。更直白的讲<strong>视图是实时更新的</strong>。</p><blockquote><p>每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据。</p></blockquote><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Author：BIGOcean&lt;/center&gt;

&lt;p&gt;请问视图是什么？视图相关语句有哪些？视图在什么场景下使用？夺命三连&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://yoursite.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>C语言之字节序</title>
    <link href="http://yoursite.com/2020/02/10/4.C%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/02/10/4.C%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%AD%97%E8%8A%82%E5%BA%8F/</id>
    <published>2020-02-10T04:30:10.000Z</published>
    <updated>2020-03-23T04:47:00.683Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="字节序理解"><a href="#字节序理解" class="headerlink" title="字节序理解"></a>字节序理解</h2><p>字节序其实就是数据在内存中的存储方式，因为内存的地址用高低位之分，数据也有高低位，所以按照存放的顺序一般可分为大端字节序，和小段字节序。</p><p>生活中我们放东西的顺序也是不一样的，有的人习惯性的将自己的物品放在自己的左手边，有的人就习惯性的放在自己的右手边，那对于电脑来说，cpu的不同，内存存储多字节数据的存储方式也相应的不同。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="主机字节序"><a href="#主机字节序" class="headerlink" title="主机字节序"></a>主机字节序</h2><p>不同类型CPU主机中，内存存储多字节整数的方法不同，称为主机字节序</p><p><strong>主机序列有两种</strong><br>小端序 ：数据的低字节存放在内存的低地址<br>大端序 ：数据的高字节存放在内存的低地址 </p><blockquote><p>一般 inter处理器的字节序为 小端序， 而 ARM 架构的处理器多为大端序</p></blockquote><h2 id="验证主机字节序"><a href="#验证主机字节序" class="headerlink" title="验证主机字节序"></a>验证主机字节序</h2><p>C语言<code>代码片</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//定义一个共用体</span><span class="token keyword">union</span> Data<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">union</span> Data data<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小端序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x78</span> <span class="token operator">==</span> data<span class="token punctuation">.</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the little end sequence\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//大端序</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the big end sequence\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="编程结果"><a href="#编程结果" class="headerlink" title="编程结果"></a>编程结果</h2><p><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/4/1.png" alt="inter处理器"></p><p><strong>运行代码的电脑是inter处理器的，验证为小端序存储</strong></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      C语言学习
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>git仓库上传了个无法点开的空文件夹是什么鬼？</title>
    <link href="http://yoursite.com/2020/02/09/21.git%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0%E4%BA%86%E4%B8%AA%E6%97%A0%E6%B3%95%E7%82%B9%E5%BC%80%E7%9A%84%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/02/09/21.git%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0%E4%BA%86%E4%B8%AA%E6%97%A0%E6%B3%95%E7%82%B9%E5%BC%80%E7%9A%84%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/</id>
    <published>2020-02-09T15:00:45.000Z</published>
    <updated>2020-03-23T08:43:35.342Z</updated>
    
    <content type="html"><![CDATA[<p>怪事年年有，今年也忒多了，在仓库上传到 GitHub 后，偶然在 GitHub 中瞄了一眼，我的天？这个图标不像文件夹啊？这个怎么点不开？git 上传正常啊？本地工作区和暂存区都是干净的了啊？</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>本地仓库提交后，<code>GitHub</code> 中某文件夹无法正常点击，内容无法显示。</p><h2 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h2><p>经排查，定位到原因：之前仓库中包含了一个特殊的文件夹（此文件夹是另外一个 <code>git</code> 仓库），在执行下面语句时：</p><pre class=" language-shell"><code class="language-shell">git add .</code></pre><p>提示仓库中包含其他仓库，需要解决此问题：删除掉此文件夹中的 <code>.git</code> 配置目录，然后依次执行以下命令：</p><pre class=" language-shell"><code class="language-shell">git add .git commit -m 'add the new file'git push</code></pre><p>顺利推送仓库到远程，过程中并无报错。这个过程或许是导致问题的原因。</p><h2 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h2><p>现在问题是本地工作区与暂存区干净如新，远程仓库有问题。该如何解决？这时用到了一个命令：</p><pre class=" language-shell"><code class="language-shell">git rm --cached <dir_name></code></pre><p>我们先来看一下手册：</p><pre class=" language-shell"><code class="language-shell">usage: git rm [<options>] [--] <file>...    -n, --dry-run         dry run    -q, --quiet           do not list removed files    --cached              only remove from the index    -f, --force           override the up-to-date check    -r                    allow recursive removal    --ignore-unmatch      exit with a zero status even if nothing matched</code></pre><p>可以看到 <code>--cached</code> 的作用：将文件仅仅从索引中移除，翻译成人能看懂的话便是 「之前已经提交，现在将此目录释放掉，恢复到工作区，未被追踪的状态，即 <code>git add .</code> 命令之前的状态」</p><p>我们执行完此命令之后使用如下命令查看所有改变后的文件状态：</p><pre class=" language-shell"><code class="language-shell">git status</code></pre><p>发现出问题的目录已经变成了红色未被追踪的状态，此时将出问题的目录中所有包含 <code>git</code> 信息的文件和目录都删除，然后再依次执行命令：</p><pre class=" language-shell"><code class="language-shell">git add .git commit -m 'add the new file'git push</code></pre><p>去远程仓库中查看后发现问题解决。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>当出现未知问题致使远程仓库同预期结果不一致时，本地可以将问题目录恢复到未被追踪状态，核查完问题之后再次提交最新结果，操作步骤如下：</p><p>1.删除缓存，释放目录，恢复到未被追踪状态：</p><pre class=" language-shell"><code class="language-shell">git rm --cached <dir_name></code></pre><p>2.依次执行如下操作再次提交：</p><pre class=" language-shell"><code class="language-shell">git add .git commit -m 'Information you need to submit'git push</code></pre><p>3.完美解决问题。</p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      git仓库上传了个无法点开的空文件夹是什么鬼？
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网络类" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C语言之字符串处理</title>
    <link href="http://yoursite.com/2020/02/09/3.c%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/02/09/3.c%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-02-09T07:12:10.000Z</published>
    <updated>2020-03-23T04:40:03.133Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p><h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><ul><li>在c语言的学习过程中，我们会学习很多字符串处理函数，入strlen，strcpy，strcmp等等,使用也特别简单，只需要调用库函数就行。</li><li>但是对于c语言初学者来说，作为一个面向过程的语言，了解其函数内的实现过程还非常用必要的。</li></ul><h2 id="2-字符串实现函数"><a href="#2-字符串实现函数" class="headerlink" title="2.字符串实现函数"></a>2.字符串实现函数</h2><h3 id="strcpy（字符串拷贝函数）"><a href="#strcpy（字符串拷贝函数）" class="headerlink" title="strcpy（字符串拷贝函数）"></a>strcpy（字符串拷贝函数）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> M 50</span><span class="token comment" spellcheck="true">//指针函数 返回值为指向字符串str1的指针</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str2 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断 是否为空指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str1<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span> str1<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span> str2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong><br><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/1.png" alt="运行1"></p><blockquote><p>注意：fgets输入的时候会将缓存区里面的回车换行</p></blockquote><p><strong>作为笔试题考察点有四处</strong></p><ol><li>异常处理  str1，str2 是否为NULL</li><li>const 的修饰，str2不能被修改需要const来修饰</li><li>字符串会拷贝 ‘\0’ </li><li>返回值（指向str2的指针），可以方便调用者调用</li></ol><h3 id="strcmp（字符串比较大小）"><a href="#strcmp（字符串比较大小）" class="headerlink" title="strcmp（字符串比较大小）"></a>strcmp（字符串比较大小）</h3><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token operator">*</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">define</span> M 50</span><span class="token macro property">#<span class="token directive keyword">define</span> N 50</span><span class="token keyword">int</span> <span class="token function">Strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输入两个字符串</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比较两字符串的大小</span>    <span class="token function">Strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断 是否为空指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>str2<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">(</span>str2<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>str2<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1&lt;str2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1=str2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong><br><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/2.png" alt="运行2"><br><strong>作为笔试题考点同上</strong></p><h3 id="strcat-（字符串拼接函数）"><a href="#strcat-（字符串拼接函数）" class="headerlink" title="strcat （字符串拼接函数）"></a>strcat （字符串拼接函数）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> M 50</span><span class="token macro property">#<span class="token directive keyword">define</span> N 50</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">str_cat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输入两个字符串</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token function">str_cat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//字符串拼接</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">str_cat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断 是否为空指针</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//字符串str1的长度</span>     <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//字符串str2的长度</span>     <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> M <span class="token operator">&lt;</span> <span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义两个指针</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pp<span class="token operator">=</span>str1<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>str1<span class="token operator">+</span>j<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token operator">=</span>str2<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong><br><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/4.png" alt="运行3"></p><h3 id="strlen（求字符串的长度）"><a href="#strlen（求字符串的长度）" class="headerlink" title="strlen（求字符串的长度）"></a>strlen（求字符串的长度）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">mystrlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input str\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用变量a来接受函数的返回值</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">mystrlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求字符串的长度</span><span class="token keyword">int</span> <span class="token function">mystrlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pStr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/4.png" alt="运行4"></p><blockquote><p>注意：strlen 和 sizeof的区别</p></blockquote><ul><li>strlen 计算字符串的长度，不计算字符串的结束标识符 ‘\0’</li><li>sizeof 计算的是占空间的大小会计算进去</li></ul><h3 id="字符串的翻转"><a href="#字符串的翻转" class="headerlink" title="字符串的翻转"></a>字符串的翻转</h3><p>*<em>方法一 *</em></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> n 50</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输入字符</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>arr<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token operator">=</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用指针p指向首地址，q指向字符的尾地址</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">char</span> tmp<span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/5.png" alt="运行5"><br><strong>方法二</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>str<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token operator">=</span>str<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>q<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token operator">*</span>q<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>        q<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="字符串的查找"><a href="#字符串的查找" class="headerlink" title="字符串的查找"></a>字符串的查找</h3><blockquote><p>编写一个字符串查找函数，函数原型为：<br>char *str_search(const char *str1, const char *str2)，<br>该函数实现在字符串str1中找出字符串str2第一次出现的位置。<br>如果str2出现在str1中，则返回str2在str1中出现的首地址，<br>如果在str1中没有与str2匹配的字符串则返回NULL</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">str_search</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义两个字符串</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//赋值</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">str_search</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\r\n"</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">str_search</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个指针指向 str1</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//逐个移动比较</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span> p<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span> p<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较两个字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span> str1<span class="token operator">+</span>i<span class="token punctuation">,</span> str2 <span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token operator">+</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token operator">*</span><span class="token punctuation">(</span> p<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><p><img src="https://cdn.jsdelivr.net/gh/bigoceans/cdn/img/post/3/6.png" alt="运行6"></p><p><strong><em>更多精彩文章请关注公众号『大海的BLOG』</em></strong></p>]]></content>
    
    <summary type="html">
    
      C语言中字符串的学习
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="语言类" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E7%B1%BB/"/>
    
  </entry>
  
</feed>
